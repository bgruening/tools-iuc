<macros>
    <token name="@tool_version@">0.3.2</token>
    <token name="@version_suffix@">0</token>
    <token name="@profile@">21.01</token>
    <xml name="requirements">
        <requirements>
            <requirement type="package" version="@tool_version@">episcanpy</requirement>
            <yield />
        </requirements>
    </xml>
    <xml name="bio_tools">
        <xrefs>
            <xref type="bio.tools">episcanpy</xref>
        </xrefs>
    </xml>
    <xml name="citations">
        <citations>
            <citation type="doi">10.1038/s41467-021-25131-3</citation>
        </citations>
    </xml>
    <xml name="version_command">
        <version_command><![CDATA[python -c "import episcanpy as esc;print('episcanpy version: %s' % esc.__version__)"]]></version_command>
    </xml>
    <token name="@CMD@"><![CDATA[
cp '$adata' 'anndata.h5ad' &&
cat '$script_file' > '$hidden_output' &&
python '$script_file' >> '$hidden_output' &&
ls . >> '$hidden_output' &&
touch 'anndata_info.txt' &&
cat 'anndata_info.txt' @CMD_prettify_stdout@
    ]]>
    </token>
    <token name="@CMD_imports@"><![CDATA[
import episcanpy as esc
import pandas as pd
import numpy as np
    ]]>
    </token>
    <xml name="sanitize_query" token_validinitial="string.printable">
        <sanitizer>
            <valid initial="@VALIDINITIAL@">
                <remove value="&apos;" />
            </valid>
       </sanitizer>
    </xml>
    <xml name="sanitize_vectors" token_validinitial="string.digits">
        <sanitizer>
            <valid initial="@VALIDINITIAL@">
                <add value=","/>
            </valid>
        </sanitizer>
    </xml>
    <xml name="inputs_anndata">
        <param name="adata" type="data" format="h5ad" label="Annotated data matrix"/>
    </xml>
    <token name="@CMD_read_inputs@"><![CDATA[
adata = esc.read('anndata.h5ad')
]]>
    </token>
    <xml name="inputs_common_advanced">
        <section name="advanced_common" title="Advanced Options" expanded="false">
            <param name="show_log" type="boolean" checked="false" label="Output Log?" />
        </section>
    </xml>
    <xml name="anndata_outputs">
        <data name="anndata_out" format="h5ad" from_work_dir="anndata.h5ad" label="${tool.name} (${method.method}) on ${on_string}: Annotated data matrix"/>
        <data name="hidden_output" format="txt" label="Log file" >
            <filter>advanced_common['show_log']</filter>
        </data>
    </xml>
    <token name="@CMD_anndata_write_outputs@"><![CDATA[
adata.write('anndata.h5ad')
with open('anndata_info.txt','w', encoding='utf-8') as ainfo:
    print(adata, file=ainfo)
]]></token>
    <token name="@CMD_prettify_stdout@"><![CDATA[ | sed -r '1 s|AnnData object with (.+) = (.*)\s*|\1: \2|g' | sed "s|'||g"  | sed -r 's|^\s*(.*):\s(.*)|[\1]\n-    \2|g' | sed 's|, |\n-    |g'
    ]]></token>
    <xml name="params_inputs">
        <expand macro="pl_var_names"/>
        <expand macro="param_groupby"/>
        <expand macro="param_num_categories"/>
    </xml>
    <token name="@CMD_params_inputs@"><![CDATA[
    #if $method.var_names.type == 'all'
    var_names=adata.var_names,
#else
    #set $var_names = ([x.strip() for x in str($method.var_names.var_names).split(',')])
    var_names=$var_names,
#end if
#if str($method.groupby) != ''
    groupby='$method.groupby',
#end if
    num_categories=$method.num_categories,
]]></token>
    <xml name="pl_var_names">
        <conditional name="var_names">
            <param name="type" type="select" label="Variables to plot (columns of the heatmaps)" >
                <option value="all">All variables in 'adata.var_names'</option>
                <option value="custom">Subset of variables in 'adata.var_names'</option>
            </param>
            <when value="all"/>
            <when value="custom">
                <param argument="var_names" type="text" value="" label="List of variables to plot" help="They should be a valid subset of 'adata.var_names', and separated by comma">
                    <expand macro="sanitize_query" />
                </param>
            </when>
        </conditional>
    </xml>
    <xml name="gene_symbols">
        <param argument="gene_symbols" type="text" value="" optional="true" label="Key for field in '.var' that stores gene symbols">
            <expand macro="sanitize_query" />
        </param>
    </xml>
    <xml name="coverage_params">
        <param argument="binary" type="boolean" truevalue="True" falsevalue="False" checked="false" 
            label="Binary" help="To reduce computing time, you can specify if the matrix is already binary" />
        <param argument="log" type="boolean" truevalue="True" falsevalue="False" checked="false"
            label="Log transform?" />
        <param argument="threshold" type="float" min="0" value="" label="Threshold"/>
        <param argument="bins" type="integer" min="0" value="50" label="Bins"/>
    </xml>
    <xml name="param_plot_format">
        <param name="format" type="select" label="Format for saving figures">
            <option value="png">png</option>
            <option value="pdf">pdf</option>
            <option value="svg">svg</option>
        </param>
    </xml>    
    <xml name="params_plots">
        <expand macro="param_log"/>
        <expand macro="param_use_raw"/>
        <expand macro="param_dendrogram"/>
        <expand macro="pl_var_group_positions"/>
        <expand macro="param_var_group_rotation"/>
        <expand macro="pl_figsize"/>
        <expand macro="param_layer"/>
    </xml>
    <xml name="param_log">
        <param argument="log" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Use the log of the values?"/>
    </xml>
    <xml name="param_groupby">
        <param argument="groupby" type="text" value="" optional="true" label="The key of the observation grouping to consider" help="If it is given, the plot is ordered by the respective group. It is expected that to be a categorical. If it is not a categorical observation, it would be subdivided into 'num_categories'.">
            <expand macro="sanitize_query" />
        </param>
    </xml>    
    <xml name="param_use_raw">
        <param argument="use_raw" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Use 'raw' attribute of input if present" help=""/>
    </xml>
    <xml name="param_num_categories">
        <param argument="num_categories" type="integer" min="0" value="7" label="Number of categories" help="It is only used if groupby observation is not categorical. This value determines the number of groups into which the groupby observation should be subdivided."/>
    </xml>    
    <xml name="param_dendrogram">
        <param argument="dendrogram" type="boolean" truevalue="True" falsevalue="False" checked="false" label="Compute and plot a dendrogram?" help="groupby categories are reordered accoring to the dendrogram order. If groups of var_names are set and those groups correspond to the groupby categories, those groups are also reordered. The ‘person’ method is used to compute the pairwise correlation between categories using all var_names in raw if use_raw is None, otherwise all adata.var_names are used. The linkage method used is complete."/>
    </xml>
    <xml name="pl_var_group_positions">
        <repeat name="var_group_positions" title="Group of variables to highlight" help="This will draw a 'bracket' on top of the plot between the given start and end positions. If a label is given, it will be added on top of the bracket. ">
            <param name="start" type="integer" min="0" value="" label="Start" help=""/>
            <param name="end" type="integer" min="0" value="" label="End" help=""/>
            <param argument="label" type="text" value="" label="Label" help="">
                <expand macro="sanitize_query" />
            </param>
        </repeat>
    </xml>
    <token name="@CMD_params_plots@"><![CDATA[
    log=$method.log,
    use_raw=$method.use_raw,
    dendrogram=$method.dendrogram,
    #if len($method.var_group_positions) > 0:
        #set $var_group_positions=[]
        #set $var_group_labels=[]
        #for $i, $s in enumerate($method.var_group_positions)
            #silent $var_group_positions.append((int($s.start), int($s.end)))
            #silent $var_group_labels.append(str($s.label))
        #end for
    var_group_positions=$var_group_positions,
    var_group_labels=$var_group_labels,
    #end if
#if $method.var_group_rotation
    var_group_rotation=$method.var_group_rotation,
#end if
#if $method.figsize.test == 'yes'
    figsize=($method.figsize.width, $method.figsize.height),
#end if
#if $method.layer != ''
    layer='$method.layer',
#end if
    ]]></token>
    <xml name="param_var_group_rotation">
        <param argument="var_group_rotation" type="float" value="" optional="true" label="Label rotation degrees" help="By default, labels larger than 4 characters are rotated 90 degrees"/>
    </xml>
    <xml name="pl_figsize">
        <conditional name="figsize">
            <param name="test" type="select" label="Custom figure size" >
                <option value="yes">Yes</option>
                <option value="no" selected="true">No: the figure width is set based on the number of variable names and the height is set to 10.</option>
            </param>
            <when value="yes">
                <param argument="width" type="integer" min="0" value="10" label="Figure width" help=""/>
                <param argument="height" type="integer" min="0" value="10" label="Figure height" help=""/>
            </when>
            <when value="no"/>
        </conditional>
    </xml>
    <xml name="param_layer">
        <param argument="layer" type="text" value="" label="Name of the AnnData object layer that wants to be plotted" help="By default 'adata.raw.X' is plotted. If 'use_raw=False' is set, then 'adata.X' is plotted. If layer is set to a valid layer name, then the layer is plotted. layer takes precedence over 'use_raw'.">
            <expand macro="sanitize_query" />
        </param>
    </xml>

</macros>
