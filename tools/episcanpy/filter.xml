<tool id="episcanpy_filter" name="Filter" version="@tool_version@+galaxy@version_suffix@" profile="@profile@">
    <description>with episcanpy</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="bio_tools"/>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
@CMD@
      ]]></command>
    <configfiles>
        <configfile name="script_file"><![CDATA[
@CMD_imports@
@CMD_read_inputs@

#if $method.method == 'pp.filter_cells'
esc.pp.filter_features(
    adata,
    #if $method.filter.filter == 'min_counts'
    min_counts=$method.filter.min_counts,
    #else if $method.filter.filter == 'max_counts'
    max_counts=$method.filter.max_counts,
    #else if $method.filter.filter == 'min_genes'
    min_genes=$method.filter.min_genes,
    #else if $method.filter.filter == 'max_genes'
    max_genes=$method.filter.max_genes,
    #end if
    copy=False)
#end if
#if $method.method == 'pp.select_var_feature'
esc.pp.select_var_fueature(
    adata,
    max_score=$method.max_score,
    #if $method.nb_features != 0
        nb_features=$method.nb_features
    #end if
)
#if $method.method == 'pp.cal_var'
esc.pp.cal_var(
    adata,
    color=$method.color
)
#end if

#end if
@CMD_anndata_write_outputs@
]]></configfile>
    </configfiles>
    <inputs>
        <expand macro="inputs_anndata"/>
        <conditional name="method">
            <param argument="method" type="select" label="Method used for filtering">
                <option value="pp.filter_cells">Filter cell outliers based on counts and numbers of genes expressed, using 'pp.filter_cells'</option>
                <option value="pp.select_var_feature">Compute a variability score to rank the most variable features across all cells 'pp.select_var_feature'</option>
                <option value="pp.cal_var">Show distribution plots of cells sharing features and variability score 'pp.cal_var'</option>
            </param>
            <when value="pp.filter_cells">
                <conditional name="filter">
                    <param argument="filter" type="select" label="Filter" help="Filter mode">
                        <option value="min_counts">Minimum number of counts</option>
                        <option value="max_counts">Maximum number of counts</option>
                        <option value="min_genes">Minimum number of genes expressed</option>
                        <option value="max_genes">Maximum number of genes expressed</option>
                    </param>
                    <when value="min_counts">
                        <param argument="min_counts" type="integer" min="0" value="" label="Minimum counts" help="Minimum number of counts required for a cell to pass filtering"/>
                    </when>
                    <when value="max_counts">
                        <param argument="max_counts" type="integer" min="0" value="" label="Maximum counts" help="Maximum number of counts required for a cell to pass filtering"/>
                    </when>
                    <when value="min_genes">
                        <param argument="min_genes" type="integer" min="0" value="" label="Minimum  genes" help="Minimum number of genes expressed required for a cell to pass filtering"/>
                    </when>    
                    <when value="max_genes">
                        <param argument="max_genes" type="integer" min="0" value="" label="Maximum genes" help="Maximum number of genes expressed required for a cell to pass filtering"/>
                    </when>
                </conditional>
            </when>
            <when value="pp.select_var_feature">
                <param argument="max_score" type="float" min="0" max="1" value="0.5" label="Max score" help="Max threshold of the variability score to retain features" />
                <param argument="nb_features" type="integer" min="0" value="0" label="NB features" help="Default value is None, if specify it will select a the top most 
                    variable features. If this parameter is larger than the total number of feature, it filters based on the min_score argument." />
            </when>
            <when value="pp.cal_var">
                <param name="color" type="select" label="Color" help="Select blue or red color">
                    <option value="b">Blue</option>
                    <option value="r">Red</option>
                </param>
            </when>
        </conditional>
        <expand macro="inputs_common_advanced"/>
    </inputs>
    <outputs>
        <expand macro="anndata_outputs"/>
    </outputs>
    <tests>
        <test>
            <!-- test 0 -->
            <param name="adata" value="krumsiek11.h5ad" />
            <conditional name="method">
                <param name="method" value="pp.filter_cells"/>
                <conditional name="filter">
                    <param name="filter" value="min_counts"/>
                    <param name="min_counts" value="3"/>
                </conditional>
            </conditional>
            <assert_stdout>
                <has_text_matching expression="336 Ã— 11"/>
            </assert_stdout>
            <section name="advanced_common">
                <param name="show_log" value="true" />
            </section>
            <output name="hidden_output">
                <assert_contents>
                    <has_text_matching expression="sc.pp.filter_cells"/>
                    <has_text_matching expression="min_counts=3"/>
                </assert_contents>
            </output>
            <output name="anndata_out" file="pp.filter_cells.krumsiek11-min_counts.h5ad" ftype="h5ad" compare="sim_size"/>
        </test>
        <test>
            <!-- test 1 -->
            <param name="adata" value="krumsiek11.h5ad" />
            <conditional name="method">
                <param name="method" value="pp.select_var_features"/>
                <param name="max_score" value="0.6"/>
                <param name="nb_features" value="10"/>
            </conditional>
            <output name="hidden_output">
                <assert_contents>
                    <has_text_matching expression="sc.pp.select_var_features"/>
                    <has_text_matching expression="adata"/>
                    <has_text_matching expression="max_genes=100"/>
                </assert_contents>
            </output>
            <output name="anndata_out" file="pp.select_var_features.krumsiek11-max_genes.h5ad" ftype="h5ad" compare="sim_size"/>
        </test>
        <test>
            <!-- test 2 -->
            <param name="adata" value="krumsiek11.h5ad" />
            <conditional name="method">
                <param name="method" value="pp.cal_var"/>
                <param name="color" value="r"/>
            </conditional>
            <output name="hidden_output">
                <assert_contents>
                    <has_text_matching expression="sc.pp.cal_var"/>
                    <has_text_matching expression="adata"/>
                    <has_text_matching expression="max_genes=100"/>
                </assert_contents>
            </output>
            <output name="anndata_out" file="pp.cal_var.krumsiek11-max_genes.h5ad" ftype="h5ad" compare="sim_size"/>
        </test>
    </tests>
    <help><![CDATA[


.. class:: infomark

**Filter features based on number of cells or counts (pp.filter_features)**

For instance, only keep cells with at least `min_counts` counts or
`min_genes` genes expressed. This is to filter measurement outliers, i.e.,
"unreliable" observations.

Only provide one of the optional parameters `min_counts`, `min_genes`,
`max_counts`, `max_genes` per call.

More details on the `episcanpy documentation
<https://episcanpy.readthedocs.io/en/anna/api/episcanpy.pp.filter_features.html>`__

------

.. class:: infomark

**Select variability feature (pp.select_var_feature)**

This function computes a variability score to rank the most variable features across all cells. Then it selects the most 
variable features according to either a specified number of features (nb_features) or a minimum variance score (min_score).

More details on the `episcanpy documentation
<https://episcanpy.readthedocs.io/en/anna/api/episcanpy.pp.select_var_feature.html>`__

    ]]></help>
    <expand macro="citations"/>
</tool>
