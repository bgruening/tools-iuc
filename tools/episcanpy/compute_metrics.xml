<tool id="episcanpy_compute_metrics" name="Compute score and metrics with Episcanpy" version="@tool_version@+galaxy@version_suffix@" profile="@profile@">
    <description>with episcanpy</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="bio_tools"/>
    <expand macro="requirements"/>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
@CMD@
      ]]></command>
    <configfiles>
        <configfile name="script_file"><![CDATA[
@CMD_imports@
import scanpy as sc
import episcanpy as esc
@CMD_read_inputs@

#if $method.method == 'nb_feat_log'
adata.obs['log_nb_features'] = [np.log10(x) for x in adata.obs['nb_features']]

#else if $method.method == 'tl.ARI'
esc.tl.ARI(
    adata,
    label_1='$method.ARI_label_1',
    label_2='$method.ARI_label_2'
    )

#else if $method.method == 'tl.homogeneity'
esc.tl.ARI(
    adata,
    label_1='$method.homogeneity_label_1',
    label_2='$method.homogeneity_label_2'
    )

#else if $method.method == 'tl.AMI'
esc.tl.ARI(
    adata,
    label_1='$method.AMI_label_1',
    label_2='$method.AMI_label_2'
    )

#else if $method.method == 'tl.rank_features'
esc.tl.rank_features(
    adata,
    groupby='$method.rank_features_groupby',
    use_raw=$method.rank_features_use_raw,
    groups='$method.rank_features_groups',
    reference='$method.rank_features_reference',
    n_features=$method.rank_features_n_features,
    rankby_abs=$method.rank_features_rankby_abs,
    key_added='$method.rank_features_key_added',
    copy=False,
    method='$method.rank_features_method',
    corr_method='$method.rank_features_corr_method'
    )

#else if $method.method == 'pp.cal_var'
esc.pp.cal_var(
    adata,
    show=True,
    color=['b', 'r'],
    save="features_and_variability_scores_distr.png"
)

#else if $method.method == 'pp.variability_features'
esc.pp.variability_features(
    adata,
    min_score=$method.min_score,
    nb_features=$method.nb_features,
    #if $method.log_mode
    log='$method.log_mode',
    #end if
    save="peakmatrix.png"
)
#end if
adata.write('anndata.h5ad')
]]></configfile>
    </configfiles>
    <inputs>
        <expand macro="inputs_anndata"/>
        <conditional name="method">
            <param argument="method" type="select" label="Method used to compute score/metrics">
                <option value="nb_feat_log">Compute log10 of nb_features</option>
                <option value="tl.ARI">ARI: Compute Adjusted Rand Index (ARI), using 'tl.ARI'</option>
                <option value="tl.homogeneity">Homogeneity: Compute homogeneity score, using 'tl.homogeneity'</option>
                <option value="tl.AMI">AMI: Compute Adjusted Mutual Information (AMI), using 'tl.AMI'</option>
                <option value="tl.rank_features">Rank features for characterizing groups, using 'tl.rank_features'</option>
                <option value="pp.cal_var">Show distribution plots of cells sharing features and variability score 'pp.cal_var'</option>
                <option value="pp.variability_features">Computes variability score to rank the most variable features across all cells, using 'pp.variability_features'</option>          
            </param>
            <when value="nb_feat_log" />
            <when value="tl.ARI">
                <param name="ARI_label_1" value="louvain" type="text" label="Label 1" help="(label_1, Computes a similarity measure between label_1 and label_2)"/>
                <param name="ARI_label_2" value="celltype" type="text" label="Label 2" help="(label_2)"/>
            </when>
            <when value="tl.homogeneity">
                <param name="homogeneity_label_1" value="louvain" type="text" label="Label 1" help="(label_1)"/>
                <param name="homogeneity_label_2" value="celltype" type="text" label="Label 2" help="(label_2)"/>
            </when>
            <when value="tl.AMI">
                <param name="AMI_label_1" value="louvain" type="text" label="Label 1" help="(label_1)"/>
                <param name="AMI_label_2" value="celltype" type="text" label="Label 2" help="(label_2)"/>
            </when>
            <when value="tl.rank_features">
                <param name="rank_features_groupby" value="louvain" type="text" label="The key of the observations grouping to consider" help="(groupby)"/>
                <param name="rank_features_use_raw" type="select" label="Use raw attribute of Anndata if present" help="(use_raw)">
                    <option value="True" selected="true">True</option>
                    <option value="False">False</option>
                </param>
                <param name="rank_features_groups" value="all" type="text" label="Subset of groups, to which comparison shall be restricted" help="(groups)"/>
                <param name="rank_features_reference" value="rest" type="text" label="Compare each group with respect to this group" help="(reference)"/>
                <param name="rank_features_n_features" value="100" type="integer" label="The number of features that appear in the returned tables" help="(n_features)"/>
                <param name="rank_features_rankby_abs" type="select" label="Rank genes by the absolute value of the score, not by the score" help="(rankby_abs)">
                    <option value="True" >True</option>
                    <option value="False" selected="true">False</option>
                </param>
                <param name="rank_features_key_added" value="rank_features_groups" type="text" label="The key in adata.uns information is saved to" help="(key_added)"/>
                <param name="rank_features_method" type="select" label="Method to use" help="(method)">
                    <option value="None">None: Do not use any method</option>
                    <option value="logreg">Logistic regression</option>
                    <option value="t-test" selected="true">t-test</option>
                    <option value="t-test_overestim_var">t-test_overestim_var</option>
                    <option value="wilcoxon">Wilcoxon rank sum</option>
                </param>
                <param name="rank_features_corr_method" value="benjamini-hochberg" type="select" label="p-value correction method" help="(corr_method)">
                    <option value="benjamini-hochberg">Benjamini Hochberg</option>
                    <option value="bonferroni">Bonferroni</option>
                </param>
            </when>
            <when value="pp.cal_var"/>
            <when value="pp.variability_features">
                <param name="min_score" type="float" min="0" max="1" value="0.5" label="Minimum score value"/>
                <param name="nb_features" type="integer" min="0" value="" label="Number of features"/>
                <param name="log_mode" type="select" optional="True" label="Log" help="Log mode">
                    <option value="log2">Log2</option>
                    <option value="log10">Log10</option>
                </param>
            </when>
        </conditional>
        <expand macro="inputs_common_advanced"/>
    </inputs>
    <outputs>
        <expand macro="anndata_outputs"/>
        <data name="out_png" format="png" from_work_dir="features_and_variability_scores_distr.png" label="${tool.name} (${method.method}) on ${on_string}">
            <filter>method['method'] == 'pp.cal_var'</filter>
        </data>
        <data name="peakmatrix_png" format="png" from_work_dir="peakmatrix.png" label="${tool.name} (${method.method}) on ${on_string}">
            <filter>method['method'] == 'pp.variability_features'</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <!-- test 0- tl.ARI -->
            <param name="adata" value="metrics_in.h5ad" />
            <conditional name="method">
                <param name="method" value="tl.ARI"/>
                <param name="ARI_label_1" value="louvain"/>
                <param name="ARI_label_2" value="celltype"/>
            </conditional>
            <section name="advanced_common">
                <param name="show_log" value="true" />
            </section>
            <output name="anndata_out" file="anndata.h5ad" ftype="h5ad"/>
        </test>
        <test>
            <!-- test 1- tl.AMI -->
            <param name="adata" value="metrics_in_chrX.h5ad" />
            <conditional name="method">
                <param name="method" value="tl.AMI"/>
                <param name="AMI_label_1" value="louvain"/>
                <param name="AMI_label_2" value="celltype"/>
            </conditional>
            <section name="advanced_common">
                <param name="show_log" value="true" />
            </section>
            <output name="anndata_out" file="anndata.h5ad" ftype="h5ad"/>
        </test>
        <test>
            <!-- test 2- tl.homogeneity -->
            <param name="adata" value="metrics_in_chrX.h5ad" />
            <conditional name="method">
                <param name="method" value="tl.AMI"/>
                <param name="homogeneity_label_1" value="louvain"/>
                <param name="homogeneity_label_2" value="celltype"/>
            </conditional>
            <section name="advanced_common">
                <param name="show_log" value="true" />
            </section>
            <output name="anndata_out" file="anndata.h5ad" ftype="h5ad"/>
        </test>
        <test>
            <!-- test 3- tl.rank_features -->
            <param name="adata" value="metrics_in.h5ad" />
            <conditional name="method">
                <param name="method" value="tl.rank_features"/>
                <param name="rank_features_groupby" value="louvain"/>
                <param name="rank_features_use_raw" value="True"/>
                <param name="rank_features_groups" value="all"/>
                <param name="rank_features_reference" value="rest"/>
                <param name="rank_features_n_features" value="100"/>
                <param name="rank_features_rankby_abs" value="False"/>
                <param name="rank_features_key_added" value="rank_features_groups"/>
                <param name="rank_features_method" value="t-test"/>
                <param name="rank_features_corr_method" value="benjamini-hochberg"/>
            </conditional>
            <section name="advanced_common">
                <param name="show_log" value="true" />
            </section>
            <output name="anndata_out" file="anndata.h5ad" ftype="h5ad"/>
        </test>
    </tests>
    <help><![CDATA[

Automatically compute PCA coordinates (`pp.lazy`)
========================================================================================
This function automatically computes PCA coordinates, loadings and variance decomposition, a neighborhood graph of
observations, t-distributed stochastic neighborhood embedding (tSNE) Uniform Manifold Approximation and Projection (UMAP).

More details on the `episcanpy documentation
<https://colomemaria.github.io/episcanpy_doc/api/episcanpy.api.pp.lazy.html>`__

    ]]></help>
    <expand macro="citations"/>
</tool>