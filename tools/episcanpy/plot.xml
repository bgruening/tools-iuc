<tool id="episcanpy_plot" name="Plot" version="@tool_version@+galaxy@version_suffix@" profile="@profile@">
    <description> with episcanpy</description>
    <expand macro="bio_tools"/>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <stdio>
        <regex match="... storing" source="stderr" level="warning"/>
    </stdio>
    <expand macro="version_command"/>
    <command detect_errors="exit_code"><![CDATA[
@CMD@
      ]]></command>
    <configfiles>
        <configfile name="script_file"><![CDATA[
@CMD_imports@
@CMD_read_inputs@

sc.settings.figdir = '.'


#if $method.method == 'pp.coverage_cells'
esc.pp.coverage_cells(
    @CMD_param_plot_inputs@
    binary=$method.binary,
    log=$method.log,
    #if $method.threshold
        threshold=$method.threshold,
    #end if
    #if $method.key_added
        key_added=$method.key_added,
    #end if
    bins=$method.bins,
    #if $method.xlabel
        xlabel=$method.xlabel,
    #end if
    #if $method.ylabel
        ylabel=$method.ylabel
    #end if
    #if $method.title
        title=$method.title
    #end if
#end if

#end if
]]></configfile>
    </configfiles>
    <inputs>
        <expand macro="inputs_anndata"/>
        <expand macro="param_plot_format"/>
        <conditional name="method">
            <param argument="method" type="select" label="Method used for plotting">
                <option value="pp.coverage_cells">Coverage cells: Histogram of the number of open features (in the case of ATAC-seq data) per cell, using 'pp.coverage_cells'</option>
            </param>
            <when value="pp.coverage_cells">
                <expand macro="params_inputs"/>
                <expand macro="gene_symbols"/>
                <expand macro="params_plots"/>
                <param argument="binary" type="boolean" truevalue="true" falsevalue="false" checked="false" 
                    label="Binary" help="To reduce computing time, you can specify if the matrix is already binary" />
                <param argument="log" type="select" label="Log" help="Log mode">
                    <option value="log2">Log2</option>
                    <option value="log10">Log10</option>
                    <option value="log1p">Log1p</option>
                    <option value="log">Ln</option>
                </param>
                <param argument="threshold" type="float" min="0" value="" label="Threshold"/>
                <param argument="key_added" type="text" value="" label="Key added">
                    <sanitizer invalid_char="">
                        <valid initial="string.letters,string.digits">
                            <add value="_" />
                            <add value=" " />
                            <add value="-" />
                        </valid>
                    </sanitizer>
                    <validator type="regex">[0-9a-zA-Z_ -]+</validator>
                </param>
                <param argument="bins" type="integer" min="0" value="50" label="Bins"/>
                <param argument="xlabel" type="text" value="" label="xlabel">
                    <sanitizer invalid_char="">
                        <valid initial="string.letters,string.digits">
                            <add value="_" />
                            <add value="-" />
                            <add value=" " />
                        </valid>
                    </sanitizer>
                    <validator type="regex">[0-9a-zA-Z_- ]+</validator>
                </param>
                <param argument="ylabel" type="text" value="" label="ylabel">
                    <sanitizer invalid_char="">
                        <valid initial="string.letters,string.digits">
                            <add value="_" />
                            <add value="-" />
                            <add value=" " />
                        </valid>
                    </sanitizer>
                    <validator type="regex">[0-9a-zA-Z_- ]+</validator>
                </param>
                <param argument="title" type="text" value="" label="Title">
                    <sanitizer invalid_char="">
                        <valid initial="string.letters,string.digits">
                            <add value="_" />
                            <add value="-" />
                            <add value=" " />
                        </valid>
                    </sanitizer>
                    <validator type="regex">[0-9a-zA-Z_- ]+</validator>
                </param>
            </when>
        </conditional>
        <expand macro="inputs_common_advanced"/>
    </inputs>
    <outputs>
        <data name="out_png" format="png" from_work_dir="*.png" label="${tool.name} (${method.method}) on ${on_string}">
            <filter>format == 'png' and method['method'] != 'pl.rank_genes_groups_violin'</filter>
        </data>
        <collection name="collection_png" type="list" label="${tool.name} (${method.method}) on ${on_string}">
            <discover_datasets pattern="rank_genes_groups_(?P&lt;designation&gt;.*).png" format="png"/>
            <filter>format == 'png' and method['method'] == 'pl.rank_genes_groups_violin'</filter>
        </collection>
        <data name="out_pdf" format="pdf" from_work_dir="*.pdf" label="${tool.name} (${method.method}) on ${on_string}">
            <filter>format == 'pdf' and method['method'] != pl.rank_genes_groups_violin</filter>
        </data>
        <collection name="collection_pdf" type="list" label="${tool.name} (${method.method}) on ${on_string}">
            <discover_datasets pattern="rank_genes_groups_(?P&lt;designation&gt;.*).pdf" format="pdf"/>
            <filter>format == 'pdf' and method['method'] == 'pl.rank_genes_groups_violin'</filter>
        </collection>
        <data name="out_svg" format="svg" from_work_dir="*.svg" label="${tool.name} (${method.method}) on ${on_string}">
            <filter>format == 'svg' and method['method'] != pl.rank_genes_groups_violin</filter>
        </data>
        <collection name="collection_svg" type="list" label="${tool.name} (${method.method}) on ${on_string}">
            <discover_datasets pattern="rank_genes_groups_(?P&lt;designation&gt;.*).svg" format="svg"/>
            <filter>format == 'svg' and method['method'] == 'pl.rank_genes_groups_violin'</filter>
        </collection>
        <data name="hidden_output" format="txt" label="Log file" hidden="true" >
            <filter>advanced_common['show_log']</filter>
        </data>
    </outputs>
    <tests>
        <test>
            <!-- test 0: pl.scatter !-->
            <param name="adata" value="pbmc68k_reduced.h5ad" />
            <param name="format" value="png"/>
            <conditional name="method">
                <param name="method" value="pl.scatter"/>
                <conditional name="type">
                    <param name="type" value="basis"/>
                    <param name="basis" value="umap"/>
                    <param name="color" value="HES4"/>
                </conditional>
                <param name="use_raw" value="True"/>
                <param name="sort_order" value="True"/>
                <section name="plot">
                    <param name="projection" value="2d"/>
                    <param name="legend_loc" value="right margin"/>
                    <param name="legend_fontsize" value="1"/>
                    <param name="legend_fontweight" value="normal"/>
                    <param name="color_map" value="inferno"/>
                    <param name="palette" value="inferno"/>
                    <param name="frameon" value="True"/>
                    <param name="size" value="1"/>
                </section>
            </conditional>
            <section name="advanced_common">
                <param name="show_log" value="true" />
            </section>
            <output name="hidden_output">
                <assert_contents>
                    <has_text_matching expression="sc.pl.scatter"/>
                    <has_text_matching expression="basis='umap'" />
                    <has_text_matching expression="color=\['HES4'\]"/>
                    <has_text_matching expression="use_raw=True"/>
                    <has_text_matching expression="sort_order=True"/>
                    <has_text_matching expression="projection='2d'"/>
                    <has_text_matching expression="legend_loc='right margin'"/>
                    <has_text_matching expression="legend_fontsize=1"/>
                    <has_text_matching expression="legend_fontweight='normal'"/>
                    <has_text_matching expression="color_map='inferno'"/>
                    <has_text_matching expression="frameon=True"/>
                    <has_text_matching expression="size=1.0"/>
                </assert_contents>
            </output>
            <output name="out_png" file="pl.scatter.umap.pbmc68k_reduced.png" ftype="png" compare="sim_size"/>
        </test>
    </tests>
    <help><![CDATA[

Generic: XXX 
==================================

Wraps `seaborn.violinplot` for `anndata.AnnData`.

More details on the `scanpy documentation
<https://scanpy.readthedocs.io/en/latest/api/scanpy.pl.violin.html>`__
    ]]></help>
    <expand macro="citations"/>
</tool>
