<tool id="hybpiper" name="Hybpiper" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>Analyse targeted sequence capture data</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="xrefs"/>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[

    ## set up files
    ln -s '$targetfile_dna' ./target_file.fasta
    &&

    ###############################
    ## hybpiper check_targetfile ##
    ###############################

    #if str( $job_conditional.hybpiper_job ) == "check_and_fix_targetfile":
        hybpiper check_targetfile 
        --targetfile_dna target_file.fasta
        &&

        mv fix_targetfile*.ctl hybpiper.ctl
        &&

        hybpiper fix_targetfile
        --targetfile_dna target_file.fasta
        --allow_gene_removal
        hybpiper.ctl
        &&
    
    #######################
    ## hybpiper assemble ##
    #######################

    #elif str( $job_conditional.hybpiper_job ) == "assemble":
        #set sample_prefix = str($job_conditional.paired_input.element_identifier)        
        hybpiper assemble
        --readfiles
        $job_conditional.paired_input.forward
        $job_conditional.paired_input.reverse
        --targetfile_dna target_file.fasta
        --diamond
        --cpu \${GALAXY_SLOTS:-1}
        --prefix '${sample_prefix}'
        &&

        tar -cvf '${hybpiper_archive}' --directory='${sample_prefix}' .
        &&

    #######################################
    ## hybpiper stats/retrieve_sequences ##
    #######################################

    #elif str( $job_conditional.hybpiper_job ) == "stats":
        #for $sample in $job_conditional.hybpiper_results
            #set sample_name = str($sample.element_identifier)
            
            mkdir -p '${sample_name}'
            &&

            tar -xf '$sample'
            -C '${sample_name}'
            &&

            echo '${sample_name}' >> namelist.txt
            &&
        #end for

        ## Produce a stats file for each requested output type
        #for $stats_output in $job_conditional.stats_type_select:
            hybpiper stats
            --targetfile_dna target_file.fasta
            --stats_filename 'stats.${stats_output}'
            --seq_lengths_filename 'seq_lengths.${stats_output}'
            '${stats_output}'
            namelist.txt
            &&

            ## Produce heatmaps if selected
            #if $job_conditional.heatmap:
                hybpiper recovery_heatmap
                --heatmap_filename 'heatmap.${stats_output}'
                --heatmap_filetype svg
                'seq_lengths.${stats_output}.tsv'
                &&
            #end if
        #end for

        ## Produce sequences for each requested type
        #for $sequence_output in $job_conditional.sequence_type_select:
            mkdir 'fasta.${sequence_output}'
            &&
            hybpiper retrieve_sequences
            --targetfile_dna target_file.fasta
            --sample_names namelist.txt
            --fasta_dir 'fasta.${sequence_output}'
            '${sequence_output}'
            &&
        #end for
    #end if
    
    wait

]]></command>
    
    <inputs>
        <param argument="--targetfile_dna" type="data" format="fasta" label="Target file" help="Target file in FASTA format" />
    
        <conditional name="job_conditional">
            <param name="hybpiper_job" type="select" label="Type of hybpiper run">
                <option value="check_and_fix_targetfile">Check and fix targetfile</option>
                <option value="assemble" selected="true">Assemble target loci</option>
                <option value="stats">Extract sequences and/or stats from Hybpiper runs</option>
            </param>
    
            <when value="check_and_fix_targetfile">              
            </when>
    
            <when value="assemble">
                <param name="paired_input" format="fastqsanger" type="data_collection" collection_type="paired" label="Input reads" help="Your input must be a paired collection. If you need help formatting your data, see the &quot;Using Galaxy and Managing your Data&quot; section of the Galaxy training site. Single-end and unpaired input is currently unavailable for Hybpiper on Galaxy." />
            </when>
    
            <when value="stats">
                <param name="hybpiper_results" type="data_collection" collection_type="list" format="tar" multiple="true" label="Results from Hybpiper assemble runs" />
                <param name="stats_type_select" type="select" label="Choose statistics to report" display="checkboxes" multiple="true">
                    <option value="gene" selected="true">Gene</option>
                    <option value="supercontig">Supercontig</option>
                </param>
                <param name="heatmap" type="boolean" checked="false" label="Produce a heatmap for each of the selected statistics" />
                <param name="sequence_type_select" type="select" display="checkboxes" label="Choose sequences to extract" multiple="true">
                    <option value="dna" selected="true">DNA</option>
                    <option value="aa">Amino acid</option>
                    <option value="intron">Intron</option> 
                    <option value="supercontig">Supercontig</option>
                </param>
            </when>
        </conditional>
    </inputs>
    
    <outputs>
        <!-- check_targetfile output -->
        <data name="fixed_targetfile" label="${targetfile_dna.element_identifier} (fixed)" format="fasta" from_work_dir="target_file_fixed.fasta">
            <filter>job_conditional['hybpiper_job'] == 'check_and_fix_targetfile'</filter>
        </data>
        <collection type="list" name="output_targetfile" label="Hybpiper logs for ${targetfile_dna.element_identifier}">
            <data name="targetfile_ctl_file" label="Hybpiper .ctl file for ${on_string}" format="txt" from_work_dir="hybpiper.ctl" />
            <data name="targetfile_report" label="Hybpiper targetfile report" format="tabular" from_work_dir="fix_targetfile_report.tsv" />
            <filter>job_conditional['hybpiper_job'] == 'check_and_fix_targetfile'</filter>
        </collection>

        <!-- assemble output -->
        <data name="hybpiper_archive" format="tar">
            <filter>job_conditional['hybpiper_job'] == 'assemble'</filter>
        </data>

        <!-- stats / stats output -->
        <collection name="hybpiper_stats" type="list" label="Hybpiper statistics">
            <data name="stats_gene" label="Hybpiper statistics (gene)" format="tabular" from_work_dir="stats.gene.tsv">
            </data>
            <data name="stats_supercontig" label="Hybpiper statistics (supercontig)" format="tabular" from_work_dir="stats.supercontig.tsv">
            </data>
            <data name="seqlengths_gene" label="Assembled sequence lengths (gene)" format="tabular" from_work_dir="seq_lengths.gene.tsv">
            </data>
            <data name="seqlengths_supercontig" label="Assembled sequence lengths (supercontig)" format="tabular" from_work_dir="seq_lengths.supercontig.tsv">
            </data>
            <filter>job_conditional['hybpiper_job'] == 'stats' and ('gene' in job_conditional['stats_type_select'] or 'supercontig' in job_conditional['stats_type_select'])</filter>
        </collection>

        <!-- stats/heatmap output -->
        <collection name="hybpiper_heatmaps" type="list" label="Hybpiper heatmaps">
            <discover_datasets pattern="heatmap\.(?P&lt;designation&gt;.+)\.svg" format="svg" recurse="false" />
            <filter>job_conditional['hybpiper_job'] == 'stats' and job_conditional['heatmap'] and job_conditional['heatmap'] is true</filter>            
        </collection>

        <!-- stats/sequences output -->         
        <collection name="dna_sequences" type="list" label="DNA sequences">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.FNA" format="fasta" directory="fasta.dna" recurse="false" />
            <filter>job_conditional['hybpiper_job'] == 'stats' and 'dna' in job_conditional['sequence_type_select']</filter>
        </collection>
        <collection name="aa_sequences" type="list" label="Amino acid sequences">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.FAA" format="fasta" directory="fasta.aa" recurse="false" />
            <filter>job_conditional['hybpiper_job'] == 'stats' and 'aa' in job_conditional['sequence_type_select']</filter>
        </collection>
        <collection name="intron_sequences" type="list" label="Intron sequences">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.fasta" format="fasta" directory="fasta.intron" recurse="false" />
            <filter>job_conditional['hybpiper_job'] == 'stats' and 'intron' in job_conditional['sequence_type_select']</filter>
        </collection>
        <collection name="supercontig_sequences" type="list" label="Supercontig sequences">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.fasta" format="fasta" directory="fasta.supercontig" recurse="false" />
            <filter>job_conditional['hybpiper_job'] == 'stats' and 'supercontig' in job_conditional['sequence_type_select']</filter>
        </collection>

    </outputs>
    <tests>

    <!-- test1: check and fix targetfile -->
    <test expect_num_outputs="4">
        <param name="targetfile_dna" value="test_targets.fasta.gz"/>
        <conditional name="job_conditional">
            <param name="hybpiper_job" value="check_and_fix_targetfile"/>
        </conditional>
        <output_collection name="output_targetfile" type="list">
            <element name="fixed_targetfile" file="test1_out.fasta"/>
            <element name="targetfile_ctl_file" file="test1_out.ctl"/>    
            <element name="targetfile_report" file="test1_out.tsv"/>
        </output_collection>
    </test>

    <!-- test2: assemble with paired collection -->
    <test expect_num_outputs="1">
        <param name="targetfile_dna" value="test1_out.fasta"/>
        <conditional name="job_conditional">
            <param name="hybpiper_job" value="assemble"/>
            <param name="paired_input">
                <collection type="paired">
                    <element name="forward" ftype="fastq.gz" value="NZ874_R1_test.fastq.gz" />
                    <element name="reverse" ftype="fastq.gz" value="NZ874_R2_test.fastq.gz" />
                </collection>
            </param>
        </conditional>
        <!-- should be one output, but assign_primary_output doesn't work -->
        <output name="hybpiper_archive" file="test2_out.tar"/>
    </test>

    <!-- test3: all stats output -->
    <!-- This won't work yet, because stats relies on the sample identifier being passed  -->
    <test expect_num_outputs="10">
        <param name="targetfile_dna" value="test1_out.fasta"/>
        <conditional name="job_conditional">
            <param name="hybpiper_job" value="stats"/>
            <param name="hybpiper_results" >
                <collection type="list">
                    <element name="NZ874_assembled.tar" />
                </collection>
            </param>
            <param name="stats_type_select" value="gene,supercontig"/>
            <param name="heatmap" value="true"/>
            <param name="sequence_type_select" value="dna,aa,intron,supercontig"/>
        </conditional>
        <output_collection name="hybpiper_stats" type="list" count="4">
        </output_collection>
        <output_collection name="hybpiper_heatmaps" type="list" count="2">
        </output_collection>
        <output_collection name="dna_sequences" type="list" count="13">
        </output_collection>
        <output_collection name="aa_sequences" type="list" count="13">
        </output_collection>
        <output_collection name="intron_sequences" type="list" count="13">
        </output_collection>
        <output_collection name="supercontig_sequences" type="list" count="13">
        </output_collection>
    </test>

    </tests>
    <help><![CDATA[

.. class:: infomark

**What it does**

HybPiper was designed for targeted sequence capture, in which DNA
sequencing libraries are enriched for gene regions of interest,
especially for phylogenetics. HybPiper is a suite of Python
scripts/modules that wrap and connect bioinformatics tools in order to
extract target sequences from high-throughput DNA sequencing reads.

Targeted bait capture is a technique for sequencing many loci
simultaneously based on bait sequences. The HybPiper pipeline starts
with high-throughput sequencing reads (for example from Illumina MiSeq),
and assigns them to target genes using BLASTx/DIAMOND or BWA. The reads
are distributed to separate directories, where they are assembled
separately using SPAdes. The main output is a FASTA file of the (in
frame) CDS portion of the sample for each target region, and a separate
file with the translated protein sequence.

HybPiper also includes commands to extract the intronic regions flanking
each exon, and investigate putative paralogs. For more information,
please see our wiki.

HybPiper is run separately for each sample (single or paired-end
sequence reads, with an optional file of unpaired reads in the latter
scenerio). When HybPiper generates sequence files from the reads, it
does so in a standardized directory hierarchy. Many of the
post-processing commands rely on this directory hierarchy, so do not
modify it after running the initial pipeline. It is a good idea to run
the pipeline for each sample from the same directory. You will end up
with one directory per run of HybPiper, and some of the later commands
take advantage of this predictable directory structure.

    ]]></help>
    <expand macro="citations"/>
</tool>
