<tool id="hybpiper" name="Hybpiper" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>Analyse targeted sequence capture data</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="xrefs"/>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
   
    ln -s '$targetfile_dna' ./target_file.fasta

    &&

    #if str( $job_conditional.hybpiper_job ) == "check_and_fix_targetfile":
        hybpiper check_targetfile 
        --targetfile_dna target_file.fasta
        &&
        mv fix_targetfile*.ctl hybpiper.ctl
        &&
        hybpiper fix_targetfile
        --targetfile_dna target_file.fasta
        --allow_gene_removal
        hybpiper.ctl
    #elif str( $job_conditional.hybpiper_job ) == "assemble":
        #if str($job_conditional.prefix) != '':
            #set sample_prefix = str($job_conditional.prefix)
        #else:
            #set sample_prefix = str($R1.name)
        #end if
        ln -s \$_GALAXY_JOB_TMP_DIR '${sample_prefix}'
        &&
        hybpiper assemble
        --readfiles '$R1' '$R2'
        #if $unpaired:
            --unpaired '${unpaired}'
        #end if
        --targetfile_dna target_file.fasta
        --diamond
        --cpu \${GALAXY_SLOTS:-1}
        --prefix '${sample_prefix}'
        &&
        tar -cvzf sample.tar.gz
        --directory=\$_GALAXY_JOB_TMP_DIR .
    ## #elif str( $job_conditional.hybpiper_job ) == "stats":
    #end if
    
]]></command>
    <inputs>
        <param argument="--targetfile_dna" type="data" format="fasta" label="Target file" help="Target file in FASTA format" />
        <conditional name="job_conditional">
            <param name="hybpiper_job" type="select" label="Type of hybpiper run">
                <option value="check_and_fix_targetfile">Check and fix targetfile</option>
                <option value="assemble">Assemble target loci</option>
                <option value="stats">Extract sequences and/or stats from Hybpiper runs</option>
            </param>
            <when value="check_and_fix_targetfile">              
            </when>
            <when value="assemble">
                <param name="R1" type="data" format="fastq" label="R1 read file"/>
                <param name="R2" type="data" format="fastq" label="R2 read file" />
                <param name="unpaired" optional="true" type="data" format="fastq" label="Unpaired reads" help="If you kept the unpaired reads from adaptor trimming, you can use them here." />
                <param argument="--prefix" optional="true" type="text" value="" label="Sample name" help="Provide a name for this sample. By default, the name of the R1 read file will be used.">
                    <sanitizer invalid_char="">
                        <valid initial="string.letters,string.digits">
                            <add value="_" />
                        </valid>
                    </sanitizer>
                    <validator type="regex">[0-9a-zA-Z_]+</validator>     
                </param>
            </when>
            <when value="stats">
                <param name="hybpiper_results" type="data" format="tar" multiple="true" label="Results from Hybpiper assemble runs" />                
            </when>
        </conditional>
    </inputs>
    <outputs>
        <collection type="list" name="output_targetfile" label="${tool.name} check and fix output on ${on_string}">
            <data name="fixed_targetfile" format="fasta" from_work_dir="target_file_fixed.fasta"/>
            <data name="targetfile_ctl_file" format="txt" from_work_dir="hybpiper.ctl" />
            <data name="targetfile_report" format="tabular" from_work_dir="fix_targetfile_report.tsv" />
            <filter>job_conditional['hybpiper_job'] == 'check_and_fix_targetfile'</filter>
        </collection>       
        <data name="assembly_archive" format="tar.gz" label="${tool.name} assembly on ${on_string}" from_work_dir="sample.tar.gz">
            <filter>job_conditional['hybpiper_job'] == 'assemble'</filter>
        </data>
    </outputs>
    <tests>
    <!-- test1: check and fix targetfile -->
    <test expect_num_outputs="4">
        <param name="targetfile_dna" value="test_targets.fasta.gz"/>
        <conditional name="job_conditional">
            <param name="hybpiper_job" value="check_and_fix_targetfile"/>
        </conditional>
        <output_collection name="output_targetfile" type="list">
            <element name="fixed_targetfile" file="test1_out.fasta"/>
            <element name="targetfile_ctl_file" file="test1_out.ctl"/>    
            <element name="targetfile_report" file="test1_out.tsv"/>
        </output_collection>
    </test>
    <!-- test2: assemble with r1, r2 and unpaired -->
    <test expect_num_outputs="1">
        <param name="targetfile_dna" value="test1_out.fasta"/>
        <conditional name="job_conditional">
            <param name="hybpiper_job" value="assemble"/>
            <param name="R1" value="NZ874_R1_test.fastq.gz"/>
            <param name="R2" value="NZ874_R2_test.fastq.gz"/>
            <param name="unpaired" value="NZ874_unpaired_test.fastq.gz"/>
        </conditional>
        <output name="assembly_archive" file="test2_out.tar.gz"/>
    </test>
    <!-- test3: assemble with r1 and r2 but no unpaired. -->
    <test expect_num_outputs="1">
        <param name="targetfile_dna" value="test1_out.fasta"/>
        <conditional name="job_conditional">
            <param name="hybpiper_job" value="assemble"/>
            <param name="R1" value="NZ874_R1_test.fastq.gz"/>
            <param name="R2" value="NZ874_R2_test.fastq.gz"/>
        </conditional>
        <output name="assembly_archive" file="test3_out.tar.gz"/>
    </test>
    </tests>
    <help><![CDATA[

.. class:: infomark

**What it does**

HybPiper was designed for targeted sequence capture, in which DNA
sequencing libraries are enriched for gene regions of interest,
especially for phylogenetics. HybPiper is a suite of Python
scripts/modules that wrap and connect bioinformatics tools in order to
extract target sequences from high-throughput DNA sequencing reads.

Targeted bait capture is a technique for sequencing many loci
simultaneously based on bait sequences. The HybPiper pipeline starts
with high-throughput sequencing reads (for example from Illumina MiSeq),
and assigns them to target genes using BLASTx/DIAMOND or BWA. The reads
are distributed to separate directories, where they are assembled
separately using SPAdes. The main output is a FASTA file of the (in
frame) CDS portion of the sample for each target region, and a separate
file with the translated protein sequence.

HybPiper also includes commands to extract the intronic regions flanking
each exon, and investigate putative paralogs. For more information,
please see our wiki.

HybPiper is run separately for each sample (single or paired-end
sequence reads, with an optional file of unpaired reads in the latter
scenerio). When HybPiper generates sequence files from the reads, it
does so in a standardized directory hierarchy. Many of the
post-processing commands rely on this directory hierarchy, so do not
modify it after running the initial pipeline. It is a good idea to run
the pipeline for each sample from the same directory. You will end up
with one directory per run of HybPiper, and some of the later commands
take advantage of this predictable directory structure.

    ]]></help>
    <expand macro="citations"/>
</tool>