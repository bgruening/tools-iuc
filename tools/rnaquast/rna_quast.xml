<tool id="rna_quast" name="rnaQUAST" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>A quality assessment tool for De Novo transcriptome assemblies</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro='xrefs'/>
    <expand macro='requirements'/>
    <stdio>
        <regex match="Traceback " source="both" level="fatal" description="rnaQuast failed" />
    </stdio>
    <command detect_errors="exit_code"><![CDATA[
    #import os, re
    #set $counter = 0
    #for $i in $transcripts        
        ln -s $i '${re.sub('[^\w\-.]', '_', i.element_identifier)}' &&
        #set $counter = $counter +1
    #end for
    #if $reference
        #for $rf in $reference
            ln -s '$rf' '${re.sub('[^\w\-.]', '_', rf.element_identifier)}' &&
        #end for
    #end if
    #if $gene_coordinates.selector == "true"
        #for $g in $gene_coordinates.gtf
            ln -s '$g' '${re.sub('[^\w\-.]', '_', g.element_identifier)}' &&
        #end for
    #end if    
    mkdir outputdir &&
    rnaQUAST.py
    --threads \${GALAXY_SLOTS:-4}
    --transcripts
    #for $i in $transcripts
         '${re.sub('[^\w\-.]', '_', i.element_identifier)}'
    #end for
    #if $reads_option.selector == 'paired'
        --left_reads '${reads_option.forward_reads}'
        --right_reads '${reads_option.reverse_reads}'
    #else if $reads_option.selector == 'single'
        --single_reads '${reads_option.single_reads}'
    #end if
    $advanced_options.strand_specific
    #if $reads_alignment
        --reads_alignment '${reads_alignment}'
    #end if
    #if $reference
        -r
        #for $rf in $reference
            '${re.sub('[^\w\-.]', '_', rf.element_identifier)}'
        #end for
    #end if
    #if $gene_coordinates.selector == "true"
        --gtf
        #for $g in $gene_coordinates.gtf
            '${re.sub('[^\w\-.]', '_', g.element_identifier)}'
        #end for
        $gene_coordinates.disable_infer_genes
        $gene_coordinates.disable_infer_transcripts
    #end if
    $advanced_options.prokaryote
    --min_alignment $advanced_options.min_alignment
    $advanced_options.blat

    #if "pdf" not in $output_options.out_sr and "plots" not in $output_options.out_add
        --no_plots
    #end if
    #if $busco_option.busco == 'true'
        --busco 
        #if $busco_option.lineage_conditional.selector == 'cached':
            $busco_option.lineage_conditional.cached_db.fields.path
        #else
            $busco_option.lineage
        #end if
    #end if
    ## $advanced_options.gene_mark
    $advanced_options.meta
    --lower_threshold $advanced_options.lower_threshold
    --upper_threshold $advanced_options.upper_threshold
    -o outputdir
    
    && ls -lh ./outputdir/
    #if $counter == 1
        #set $path = "/".join(['outputdir',($transcripts[0].element_identifier).split(".")[0]]) + "_output"
        && mv $path './results'
        && ls ./results
    #end if
    #if 'gz' in $output_options.out_add
        && tar -czvf results.tar.gz './results'
    #end if
    ## move per outputs that are generated for each input (outputdir/ASSEMBLER_output)
    ## to a joint dir (details) to make them discoverable
    ## also remove "ASSEMBLER." prefixes from files (otherwise the test macros don't work)
    ##for $i in $transcripts
    ##    #set basename = os.path.splitext(re.sub('[^\w\-.]', '_', $i.element_identifier))[0]
    ##    #for $folder in './outputdir/${basename}_output'
    ##end for

    ## rename .list files to .txt files to make them detectable (format detection by extension)
    ## the final `true` seems needed since otherwise the `;` at the end is swallowed
##&& find './results/' -name "*.list" -exec mv {} {}.txt \;
    ##&& true
    && ls -l
    && ls -l './results' > $files
    ## && ls -l './results/txt_dir'
    ##&& gs -q -sPAPERSIZE=letter -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=./results/*
    && ls -l
    ##&& ls -l './outputdir/${transcripts[0].element_identifier}_output' > $files
    #if $counter == 1
        && printf "************ METRICS/TRANSCRIPTS ***************\n" > stats.txt
        && for file_name in ./results/*txt; do printf "\n************ \$file_name ************\n" >> stats.txt 
        && sed 's/^ ==.*/&\n/' \$file_name | tail -q -n +2 "\$file_name" >> stats.txt; 
        done
        ##&& for file_name in ./results/*txt; do printf "\n************ \$file_name ************\n" >> stats.txt && sed 's/^ ==.*/&\n/' \$file_name | tail -q -n +2 "\$file_name" >> stats.txt; done
        ##&& for file_name in ./results/*txt; do echo $file_name && echo "./results/\$filename.element_identifier" >> stats.txt && tail -q -n +2 ./results/\$file_name >> stats.txt; done
        && cat stats.txt > $stats
        && ls -l results
    #else  
        && ls -l outputdir/ > $files
        #for $i,$j in enumerate($transcripts)
            && ls -l 'outputdir/${re.sub("[^\w\-.]", "_", j.element_identifier)}'
        #end for
    #end if
    ]]>    </command>
    <inputs>
        <param argument="--transcripts" type="data" format="fasta" multiple="true" label="Transcripts" help="File(s) with transcripts in FASTA format."/>
        <conditional name="reads_option">
            <param name="selector" type="select" label="Single-end or paired-end reads">
                <option value="" selected="true">Disabled-end</option>
                <option value="single" selected="true">Single-end</option>
                <option value="paired">Paired-end (as individual datasets)</option>
            </param>
            <when value=""/>
            <when value="single">
                <param format="fastq,fastq.gz,fastqsanger,fastqsanger.gz" name="single_reads" type="data" label="RNA-Seq FASTQ/FASTA file"/>
            </when>
            <when value="paired">
                <param name="forward_reads" format="fastq,fastq.gz,fastqsanger ,fastqsanger.gz"  type="data" label="RNA-Seq FASTQ/FASTA file, forward reads"/>
                <param name="reverse_reads" format="fastq,fastq.gz,fastqsanger, fastqsanger.gz"  type="data" label="RNA-Seq FASTQ/FASTA file, reverse reads"/>
            </when>
        </conditional>
        <param argument="--reference" type="data" format="fasta" label="Reference genome"  multiple="true" optional="true" help="File with reference genome containing all chromosomes/scaffolds in FASTA forma." />
        <conditional name="gene_coordinates">
            <param name="selector" type="select" label="Genome annotation" help="File with gene coordinates. We recommend to use files downloaded from GENCODE or Ensembl.">
                <option value="true">Enabled</option>
                <option value="false" selected="true">Disabled</option>
            </param>
            <when value="true">
                <param argument="--gtf" type="data" format="gtf,gff,gff3" multiple="true" label="GTF/GFF file" />
                <param argument="--disable_infer_genes" type="boolean" truevalue="--disable_infer_genes" falsevalue="" checked="false" label=" Disable infor genes" 
                    help="Use this option if your GTF file already contains genes records, otherwise gffutils will fix it. Note that gffutils may work for quite a long time"/>
                <param argument="--disable_infer_transcripts" type="boolean" truevalue="--disable_infer_transcripts" falsevalue="" checked="false" label="Disable infer transcripts" help="Is option if your GTF file already contains transcripts records, otherwise gffutils will fix it."/>
            </when>
            <when value="false">
            </when>
        </conditional>
        <param argument="--reads_alignment" type="data" format="sam" label="Aligned reads to reference genome" optional="true" help="File with read alignments to the reference genome" />
        <conditional name="busco_option">
          <param argument="--busco" type="select" label="Run BUSCO" help="BUSCO allows to detect core genes in the assembled transcripts">
              <option value="false">Disabled</option>
              <option value="true">Enabled</option>
          </param>
          <when value="false"/>
          <when value="true">
            <conditional name="lineage_conditional">
                <param name="selector" type="select" label="Lineage data source">
                    <option value="download">Download lineage data</option>
                    <option value="cached">Use cached lineage data</option>
                </param>
                <when value="cached">
                    <param name="cached_db" label="Cached database with lineage" type="select">
                        <options from_data_table="busco_database">
                            <validator message="No BUSCO database is available" type="no_options" />
                        </options>
                    </param>
                </when>
                <when value="download">
                    <param name="lineage" type="select" label="Lineage" help="Select a lineage for using BUSCO">
                        <option value="metazoa">Metazoa</option>
                        <option value="eukaryota">Eukaryota</option>
                        <option value="arthropoda">Arthropoda</option>
                        <option value="vertebrata">Vertebrata</option>
                        <option value="fungi">Fungi</option>
                        <option value="bacteria">Bacteria</option>
                    </param>
                </when>
            </conditional>
          </when>
        </conditional>
        <section name="advanced_options" title="Advaced options" >
            <param name="strand_specific" argument="-ss" type="boolean" truevalue="-ss" falsevalue="" checked="false" label="Strand-specific RNA-seq data" 
                help="Set if transcripts were assembled using strand-specific RNA-Seq data in order to benefit from knowing whether the transcript originated from the + or - strand"/>
            <param argument="--min_alignment" type="integer" min="0" value="50" label="Minimal alignment length to be used" help="Default value is 50"/>
            <param argument="--blat" type="boolean" truevalue="--blat" falsevalue="" checked="false" label="Run with BLAT instead of GMAP" help="BALT is especially useful for aligning long sequences and gapped mapping, which cannot be performed properly by other fast sequence mappers designed for short reads. " />
            <!-- GeneMarkST is not in Bioconda -->
            <!--param argument="-\-gene_mark" type="boolean" truevalue="-\-gene_mark" falsevalue="" checked="false" label="Run with GeneMarkS-T gene prediction tool?" 
                help="GeneMarkS-T allows to predict genes in the assembled transcripts without reference genome"/-->
            <param argument="--meta" type="boolean" truevalue="--meta" falsevalue="" checked="false" label="Meta Transcriptome" help="Run quality asessment for meta-transcriptome assemblies" />
            <param argument="--lower_threshold" type="integer" value="50" label="Lower threshold for x-assembled/covered/matched metrics." />
            <param argument="--upper_threshold" type="integer" value="95" label="Upper threshold for x-assembled/covered/matched metrics." />
            <param argument="--prokaryote" type="boolean" truevalue="--prokaryote" falsevalue="" checked="false" label="Prokararyotic organism(s)" help="Use this option if the genome is prokaryotic"/>
        </section>
        <section name="output_options" title="Output options" expanded="true">
            <param name="out_sr" type="select" multiple="true"  display="checkboxes" label="Short report formats">
                <option value="tsv">Tabular</option>
                <option value="txt">Plain text (txt)</option>
                <option value="tex">TeX</option>
                <option value="pdf" selected="true">PDF</option>
            </param>
            <param name="out_add" type="select" label="Additional outputs" multiple="true" display="checkboxes" help="Plots and comparisons oupurequire more than one transcriptome as input">
                <option value="complete" selected="true">Complete report</option>
                <option value="fasta" selected="true">FASTA files</option>
                <option value="plots" selected="true">Plots</option>
                <option value="logs">Logs</option>
                <option value="gz">Compressed output folder</option>
            </param>
        </section>

    </inputs>

    <outputs>
        <data name="files" format="txt" label="${tool.name} on ${on_string}: output files"/>
        <data name="stats" format="txt" label="${tool.name} on ${on_string}: complete report">
            <filter>counter == "1"</filter>
            <filter>"complete" in  output_options['out_add']</filter>
        </data>
        <collection name="plots" type="list" label="${tool.name} on ${on_string}: plots">
            <discover_datasets ext="png" pattern="(?P&lt;name&gt;.+)\.png" directory="results" visible="false" />
            <filter>"plots" in  output_options['out_add']</filter>
        </collection>
        <collection name="list_logs" type="list" label="${tool.name} on ${on_string}: logs">
            <discover_datasets ext="txt" pattern="(?P&lt;name&gt;.+)\.log" directory="outputdir/logs" visible="false" />
            <filter>"logs" in  output_options['out_add']</filter>
        </collection>
        <collection name="fasta_files" type="list" label="${tool.name} on ${on_string}: FASTA files">
            <discover_datasets ext="fasta" pattern="(?P&lt;name&gt;.+)\.fasta" directory="results" visible="false" />
            <filter>"fasta" in  output_options['out_add']</filter>
        </collection>
        <data name="compressed_files" format="tgz" label="${tool.name} on ${on_string}: compressed results folder" from_work_dir="results.tar.gz">
            <filter>"gz" in output_options['out_add']</filter>
        </data>
        <data name="short_report_pdf" format="pdf" label="${tool.name} on ${on_string}: short report (pdf)" from_work_dir="outputdir/short_report.pdf">
            <filter>"pdf" in output_options['out_sr']</filter>
        </data>
        <data name="short_report_txt" format="txt" label="${tool.name} on ${on_string}: short report (txt)" from_work_dir="short_reports/short_report.txt">
            <filter>"txt" in output_options['out_sr']</filter>
        </data>
        <data name="short_report_tex" format="txt" label="${tool.name} on ${on_string}: short report (tex)" from_work_dir="short_reports/short_report.tex">
            <filter>"tex" in output_options['out_sr']</filter>
        </data>
        <data name="short_report_tsv" format="tabular" label="${tool.name} on ${on_string}: short report (tsv)" from_work_dir="short_reports/short_report.tsv">
            <filter>"tsv" in output_options['out_sr']</filter>
        </data>

        <!--note the output filter of the next two outputs checks if there is
             more than 1 input for transcripts (for 1 its a HDA, for more list or HDAs) >
        <collection name="comparison_png" type="list" label="${tool.name} on ${on_string}: comparison plots">
            <discover_datasets ext="png" pattern="(?P&lt;name&gt;.+)\.png" directory="outputdir/comparison_output/" visible="false" recurse="true" />
            <filter> isinstance(transcripts, list) and "plots" in output_options['out_add']</filter>
        </collection>
        <collection name="comparison" type="list" label="${tool.name} on ${on_string}: comparison">
            <discover_datasets ext="txt" pattern="(?P&lt;name&gt;.+)\.txt" directory="outputdir/comparison_output/" visible="false" recurse="true" />
            <filter> isinstance(transcripts, list) and "comparison" in output_options['out_add']</filter>
        </collection>
        <collection name="details" type="list:list" label="${tool.name} on ${on_string}: detailed output">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)_____(?P&lt;identifier_1&gt;.+)\.(?P&lt;ext&gt;txt)" directory="details/" visible="false" />
            <filter>"details" in output_options['out_add']</filter>
        </collection>
        <collection name="details_png" type="list:list" label="${tool.name} on ${on_string}: detailed output plots">
            <discover_datasets pattern="(?P&lt;identifier_0&gt;.+)_____(?P&lt;identifier_1&gt;.+)\.(?P&lt;ext&gt;png)" directory="details/" visible="false" />
            <filter>"details" in output_options['out_add']</filter>
        </collection-->
    </outputs>
    <tests>
        <!--test expect_num_outputs="7">
            <param name="transcripts" value="idba.fasta,Trinity.fasta" ftype="fasta" />
            <param name="reference" value="Saccharomyces_cerevisiae.R64-1-1.75.dna.toplevel.fa" ftype="fasta" />
            <conditional name="gene_coordinates">
                <param name="selector" value="true" />
                <param name="gtf" value="Saccharomyces_cerevisiae.R64-1-1.75.gtf" ftype="gtf" />
                <param name="disable_infer_genes" value="true" />
                <param name="disable_infer_transcripts" value="true" />
            </conditional>
            <param name="out_sr" value="txt,tex,tsv" />
            <param name="out_add" value="logs,comparison,plots,details" />
            <expand macro="txt_output_test" />
            <expand macro="tex_output_test" />
            <expand macro="tsv_output_test" />
            <output_collection name="comparison_png" type="list" count="15" />
            <output_collection name="comparison" type="list" count="19" />
            <output_collection name="list_logs" type="list" count="8" />
            <output_collection name="details" type="list:list" count="2">
                <expand macro="details_output_test" assembler="Trinity" />
                <expand macro="details_output_test" assembler="idba" />
            </output_collection>
        </test>
        <test expect_num_outputs="6">
            <param name="transcripts" value="Trinity.fasta" ftype="fasta" />
            <conditional name="gene_coordinates">
                <param name="selector" value="false" />
            </conditional>
            <param name="min_alignment" value="30" />
            <param name="lower_threshold" value="45" />
            <param name="upper_threshold" value="95" />
            <param name="out_sr" value="txt,tex,tsv,pdf" />
            <param name="out_add" value="logs,details_plots" />

            <expand macro="pdf_output_test" />
            <expand macro="tex_output_test" />
            <expand macro="tsv_output_test" />
            <expand macro="txt_output_test" />
            <output_collection name="list_logs" type="list">
                <expand macro="element_has_text" name="Trinity.GeneMarkS_T.err" text="" />
                <expand macro="element_matching_line" name="rnaQUAST" expression="Thank you for using rnaQUAST!" />
            </output_collection>
            <output_collection name="details_png" type="list:list" count="1">
                <element name="Trinity">
                    <expand macro="element_has_text" name="Nx" text="PNG" />
                    <expand macro="element_has_text" name="transcript_length" text="PNG" />
                </element>
            </output_collection>
        </test>
        <test expect_num_outputs="6">
            <param name="transcripts" value="Trinity.fasta" ftype="fasta" />
            <conditional name="gene_coordinates">
                <param name="selector" value="false" />
            </conditional>
            <param name="min_alignment" value="30" />
            <param name="lower_threshold" value="45" />
            <param name="upper_threshold" value="95" />
            <param name="out_sr" value="txt,tex,tsv,pdf" />
            <param name="out_add" value="logs,details_plots" />
            <conditional name="busco_option">
                <param name="busco" value="true"/>
                <param name="lineage" value="metazoa"/>
            </conditional>
            <expand macro="pdf_output_test" />
            <expand macro="tex_output_test" />
            <expand macro="tsv_output_test" />
            <expand macro="txt_output_test" />
            <output_collection name="list_logs" type="list">
                <expand macro="element_has_text" name="Trinity.GeneMarkS_T.err" text="" />
                <expand macro="element_matching_line" name="rnaQUAST" expression="Thank you for using rnaQUAST!" />
            </output_collection>
            <output_collection name="details_png" type="list:list" count="1">
                <element name="Trinity">
                    <expand macro="element_has_text" name="Nx" text="PNG" />
                    <expand macro="element_has_text" name="transcript_length" text="PNG" />
                </element>
            </output_collection>
            <assert_command>
                <has_text text="-\-busco metazoa"/>
            </assert_command>
        </test-->
    </tests>
    <help><![CDATA[
**What is rnaQUAST**
- a quality assessment tool for de novo transcriptome assemblies
- evaluating RNA-Seq assembly quality and benchmarking transcriptome assemblers using reference genome and gene database
- calculates various metrics that demonstrate completeness and correctness levels of the assembled transcripts

**Using rnaQuast without reference** you wont get:

- x-assembled (Exons)
- Alignments per Isoform
- x-covered (Exons)
- x-matched (Blocks)
- gmap build logs

**Using rnaQuast with reference** you will get:
- Reports
- Logs
- Alignement/Basic Metrics
- Misassemblies/ Specificity/ Sensitivity
- Alignment multiplicity
- Block/ Transcript Lentgh
- Blocks per alignment
- Mismatch rate
- x-aligned
- Nx
- Blocks per alignment
- gmap build logs

**Using rnaQuast without gene coordinates** you wont get:
- x-assembled (Exons)
- Alignments per Isoform
- x-covered (Exons)
- x-matched (Blocks)
- gmap build logs
- Database Metrics
- Alignment multiplicity
- Mismatch rate
- NAx
- x-aligned
**Using rnaQuast with gene coordinates** you will get:
- Reports
- Logs
- Alignement/Basic Metrics
- Misassemblies/Specificity/Sensitivity
- Alignment multiplicity
- Block/Transcript length
- Blocks per alignment
- Mismatch rate
- x-aligned
- Nx/NAx
- gmap build logs
- Database Metrics
- Alignment multiplicity
More informations, see citations.
    ]]>    </help>
    <citations>
        <citation type="doi">10.1093/bioinformatics/btw218 </citation>
    </citations>
</tool>
