<tool id="verkko" name="verkko" version="1.1+galaxy0" profile="21.05">
    <description>hybrid genome assembly pipeline</description>
    <requirements>
        <requirement type="package" version="1.1">verkko</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        #set $hififiles = []
        #for $i, $datafile in enumerate($hifi):
            #set $filename = str($i) + "_hifi.fastq.gz"
            #if $datafile.is_of_type("fastq"):
                gzip $datafile &&
                ln -s ${datafile}.gz $filename &&
            #else:
                ln -s $datafile $filename &&
            #end if
            #silent $hififiles.append($filename)
        #end for
        #if $set_nano.use_nano == "yes":
            #set $nanofiles = []
            #for $j, $ontfile in enumerate($set_nano.nano):
                #set $filename = str($j) +  "_nano.fastq.gz"
                #if $ontfile.is_of_type("fastq"):
                    gzip $ontfile &&
                    ln -s ${ontfile}.gz $filename &&
                #else:
                ln -s $ontfile $filename &&
                #end if
                #silent $nanofiles.append($filename)
            #end for
        #end if
        #if $algorithm.hap_kmer.set_hap == "yes":
                mkdir h1.meryl &&
                tar -xzmf $algorithm.hap_kmer.h1 -C h1.meryl --strip-components 1 &&
                mkdir h2.meryl &&
                tar -xzmf $algorithm.hap_kmer.h2 -C h2.meryl --strip-components 1 &&
        #end if
        verkko --hifi
        #for $k, $hifi_data in enumerate($hififiles):
            $hifi_data
        #end for
        #if $set_nano.use_nano == "yes":
            --nano 
            #for $k, $nano_data in enumerate($nanofiles):
                $nano_data
            #end for
        #else:
            --no-nano
        #end if
        $algorithm.no_correction
        #if $algorithm.hap_kmer.set_hap == "yes":
            --hap-kmers h1.meryl h2.meryl $algorithm.hap_kmer.type
        #end if
        #if $algorithm.base_k:
            --base-k $algorithm.base_k
        #end if
        #if $algorithm.max_k:
            --max-k $algorithm.max_k
        #end if
        #if $algorithm.window:
            --window $algorithm.window
        #end if
        #if $algorithm.split_bases:
            --split-bases $algorithm.split_bases
        #end if
        #if $algorithm.split_reads:
            --split-reads $algorithm.split_reads
        #end if
        #if str($algorithm.min_ont_length):
             --min-ont-length $algorithm.min_ont_length
        #end if
        #if $algorithm.correct_k_mer_size:
            --correct-k-mer-size $algorithm.correct_k_mer_size
        #end if
        #if $algorithm.correct_mer_threshold:
            --correct-mer-threshold $algorithm.correct_mer_threshold
        #end if
        #if $algorithm.correct_min_read_length:
           --correct-min-read-length $algorithm.correct_min_read_length
        #end if
        #if $algorithm.correct_min_overlap_length:
            --correct-min-overlap-length $algorithm.correct_min_overlap_length
        #end if
        #if $algorithm.correct_hash_bits:
            --correct-hash-bits $algorithm.correct_hash_bits
        #end if
        #if $algorithm.seed_min_length:
            --seed-min-length $algorithm.seed_min_length
        #end if
        #if $algorithm.seed_max_length:
            --seed-max-length $algorithm.seed_max_length
        #end if
        #if $algorithm.align_bandwidth:
            --align-bandwidth $algorithm.align_bandwidth
        #end if
        #if $algorithm.score_fraction:
            --score-fraction $algorithm.score_fraction
        #end if
        #if $algorithm.min_identity:
            --min-identity $algorithm.min_identity
        #end if
        #if $algorithm.min_score:
            --min-score $algorithm.min_score
        #end if
        #if $algorithm.end_clipping:
            --end-clipping $algorithm.end_clipping
        #end if
        #if $algorithm.incompatible_cutoff:
            --incompatible-cutoff $algorithm.incompatible_cutoff
        #end if
        -d asm
        --ovs-run 1 $((${GALAXY_MEMORY_MB:-8192} * 9 / 10)) 12
    ]]></command>
    <inputs>
        <param name="hifi" type="data" format="fastq.gz" label="HiFi Reads Files" multiple="true"/>
        <conditional name="set_nano">
            <param name="use_nano" type="select" label="Assemble using ONT data?">
                <option value="yes">Yes</option>
                <option value="no">No</option>
            </param>
            <when value="yes">
                <param name="nano" type="data" format="fastq.gz" label="Oxford Nanopore Reads Files" multiple="true"/>
            </when>
            <when value="no"/>
        </conditional>
        <section name="algorithm" title="Algorithm parameters">
            <param name="no_correction" type="boolean" argument="--no-correction" label="Do not perform Canu correction on HiFi reads" truevalue="--no-correction" falsevalue=""/>
            <conditional name="hap_kmer">
                <param name="set_hap" type="select" label="Assign haplotypes from meryl databases" argument="--hap-kmers">
                    <option value="no">No</option>
                    <option value="yes">Yes</option>
                </param>
                <when value="no"/>
                <when value="yes">
                    <param name="h1" type="data" format="meryldb" label="h1"/>
                    <param name="h2" type="data" format="meryldb" label="h2"/>
                    <param name="type" type="select" format="meryldb" label="Type">
                        <option value="trio">Trio</option>
                        <option value="hic">HiC</option>
                        <option value="strandseq">Strandseq</option>
                    </param>
                </when>
            </conditional>
            <param name="base_k" type="integer" argument="--base-k" label="Base k" optional="true"/>
            <param name="max_k" type="integer" argument="--max-k" label="Max k" optional="true"/>
            <param name="window" type="integer" argument="--window" label="Window" optional="true"/>
            <param name="split_bases" type="integer" argument="--split-bases" label="Split bases" optional="true"/>
            <param name="split_reads" type="integer" argument="--split-reads" label="Split reads" optional="true"/>
            <param name="min_ont_length" type="integer" argument="--min-ont-length" label="Min ont length" optional="true"/>
            <param name="correct_k_mer_size" type="integer" argument="--correct-k-mer-size" label="Correct k mer size" optional="true"/>
            <param name="correct_mer_threshold" type="integer" argument="--correct-mer-threshold" label="Correct mer threshold" optional="true"/>
            <param name="correct_min_read_length" type="integer" argument="--correct-min-read-length" label="Correct min read length" optional="true"/>
            <param name="correct_min_overlap_length" type="integer" argument=" --correct-min-overlap-length" label=" Correct min overlap length" optional="true"/>
            <param name="correct_hash_bits" type="integer" argument="--correct-hash-bits" label="Correct hash bits" optional="true"/>
            <param name="seed_min_length" type="integer" argument="--seed-min-length" label="Seed min length" optional="true"/>
            <param name="seed_max_length" type="integer" argument="--seed-max-length" label="Seed max length" optional="true"/>
            <param name="align_bandwidth" type="integer" argument="--align-bandwidth" label="Align bandwidth" optional="true"/>
            <param name="score_fraction" type="float" argument="--score-fraction" label="Score fraction" optional="true"/>
            <param name="min_identity" type="float" argument="--min-identity" label="Min identity" optional="true"/>
            <param name="min_score" type="integer" argument="--min-score" label="Min score" optional="true"/>
            <param name="end_clipping" type="integer" argument="--end-clipping" label="End clipping" optional="true"/>
            <param name="incompatible_cutoff" type="float" argument="--incompatible-cutoff" label="Incompatible cutoff" optional="true"/>
        </section>
    </inputs>
    <outputs>
        <!-- BASIC OUTFILES -->
        <data name="assembly_fasta" format="fasta" label="Verkko on ${on_string}: assembly fasta" from_work_dir="asm/assembly.fasta"/>
        <data name="hifi_coverage" format="tabular" label="Verkko on ${on_string}: hifi coverage" from_work_dir="asm/assembly.hifi-coverage.csv"/>
        <data name="homo_gfa" format="gfa1" label="Verkko on ${on_string}: Final graph" from_work_dir="asm/assembly.homopolymer-compressed.gfa"/>
        <data name="homo_layout" format="tabular" label="Verkko on ${on_string}: Homopolymer layout" from_work_dir="asm/assembly.homopolymer-compressed.layout"/>
        <data name="homo_noseq" format="gfa1" label="Verkko on ${on_string}: Homopolymer noseq" from_work_dir="asm/assembly.homopolymer-compressed.noseq.gfa"/>
        <data name="ont_coverage" format="tabular" label="Verkko on ${on_string}: ONT coverage" from_work_dir="asm/assembly.ont-coverage.csv"/>
        <data name="hifi_corrected" format="fasta.gz" label="Verkko on ${on_string}: Hifi corrected reads" from_work_dir="asm/hifi-corrected.fasta.gz">
            <filter>algorithm['no_correction'] == False</filter>
        </data>
        <!-- HAPLOTYPES OUT -->
        <data name="unassigned" format="fasta" label="Verkko on ${on_string}: Unassigned sequences" from_work_dir="asm/assembly.unassigned.fasta">
            <filter>algorithm['hap_kmer']['set_hap'] == "yes"</filter>
        </data>
        <data name="haplo_fasta_1" format="fasta" label="Verkko on ${on_string}: assembly haplotype fasta 1" from_work_dir="asm/assembly.haplotype1.fasta">
            <filter>algorithm['hap_kmer']['set_hap'] == "yes"</filter>
        </data>
        <data name="haplo_fasta_2" format="fasta" label="Verkko on ${on_string}: assembly haplotype fasta 2" from_work_dir="asm/assembly.haplotype2.fasta">
            <filter>algorithm['hap_kmer']['set_hap'] == "yes"</filter>
        </data>
    </outputs>
    <tests>
        <test expect_exit_code="1" expect_failure="true">
            <!-- Use nano, no haplotypes -->
            <param name="hifi" value="test1.fastq.gz,test2.fastq.gz"/>
            <conditional name="set_nano">
                <param name="use_nano" value="yes"/>
                <param name="nano" value="test3.fastq.gz,test4.fastq.gz"/>
            </conditional>
            <section name="algorithm">
                <param name="base_k" value="1003"/>
                <param name="max_k" value="15001"/>
                <param name="window" value="99"/>
                <param name="split_bases" value="3000000001"/>
                <param name="split_reads" value="150001"/>
                <param name="min_ont_length" value="2"/>
                <param name="correct_k_mer_size" value="29"/>
                <param name="correct_mer_threshold" value="19"/>
                <param name="correct_min_read_length" value="4001"/>
                <param name="correct_min_overlap_length" value="2001"/>
                <param name="correct_hash_bits" value="24"/>
                <param name="seed_min_length" value="29"/>
                <param name="seed_max_length" value="9999"/>
                <param name="align_bandwidth" value="14"/>
                <param name="score_fraction" value=".98"/>
                <param name="min_identity" value=".84"/>
                <param name="min_score" value="5001"/>
                <param name="end_clipping" value="99"/>
                <param name="incompatible_cutoff" value=".14"/>
            </section>
            <assert_command>
                <has_text text="verkko --hifi 0_hifi.fastq.gz 1_hifi.fastq.gz --nano 0_nano.fastq.gz 1_nano.fastq.gz  --base-k 1003 --max-k 15001 --window 99 --split-bases 3000000001 --split-reads 150001 --min-ont-length 2 --correct-k-mer-size 29 --correct-mer-threshold 19 --correct-min-read-length 4001 --correct-min-overlap-length 2001 --correct-hash-bits 24 --seed-min-length 29 --seed-max-length 9999 --align-bandwidth 14 --score-fraction 0.98 --min-identity 0.84 --min-score 5001 --end-clipping 99 --incompatible-cutoff 0.14 -d asm"/>
            </assert_command>
        </test>
        <test expect_exit_code="1" expect_failure="true">
            <!-- No nano, use haplo, no canu correction -->
            <param name="hifi" value="test1.fastq.gz,test2.fastq.gz"/>
            <conditional name="set_nano">
                <param name="use_nano" value="no"/>
            </conditional>
            <section name="algorithm">
                <param name="no_correction" value=""/>
            </section>
            <assert_command>
                <has_text text="verkko --hifi 0_hifi.fastq.gz 1_hifi.fastq.gz --no-nano  -d asm"/>
            </assert_command>
        </test>
    </tests>
    <help><![CDATA[
        Verkko is a hybrid genome assembly pipeline developed for telomere-to-telomere assembly of PacBio HiFi and Oxford Nanopore reads. Verkko is Finnish for net, mesh and graph.

        Verkko uses Canu to correct remaining errors in the HiFi reads, builds a multiplex de Bruijn graph using MBG, aligns the Oxford Nanopore reads to the graph using GraphAligner, progressively resolves loops and tangles first with the HiFi reads then with the aligned Oxford Nanopore reads, and finally creates contig consensus sequences using Canu's consensus module. 
    ]]></help>
    <citations>
        <citation type="doi">10.1101/2022.06.24.497523</citation>
    </citations>
</tool>