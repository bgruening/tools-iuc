<tool id="ncbi_fcs_gx" name="NCBI FCS GX" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" python_template_version="3.5" profile="@PROFILE@">
    <description>detects contamination from foreign organisms in genome sequences using the genome cross-species aligner (GX)</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="edam_ontology" />
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
## copy data from local cache to shared memory
## sync_files.py get --mft "\$SOURCE_DB_MANIFEST" --dir "\$LOCAL_DB" > /dev/null 2>&1 &&
## run gx
## GX_NUM_CORES=\${GALAXY_SLOTS:-48}
GX_NUM_CORES=48 run_gx.py
    --fasta '$mode.fasta'
    --tax-id '$mode.tax_id'
##    --species '$mode.species'
    --split-fasta '$mode.split_fasta'
##    --div '$mode.div'
    --gx-db "\$LOCAL_DB"
    --mask-transposons '$mode.mask_transposons'
##    --bin-dir BIN_DIR
    --allow-same-species '$mode.allow_same_species'
    --out-basename output
    --action-report '$mode.action_report'
    --save-hits '$mode.save_hits'
    --generate-logfile '$mode.generate_logfile'
##    --debug
    ]]></command>
    <environment_variables>
        <environment_variable name="GX_ALIGN_EXCLUDE_TAXA">$getVar('mode.gx_align_exclude_taxa', '')</environment_variable>
        <environment_variable name="SOURCE_DB_MANIFEST">/dev/shm/gxdb/all.manifest</environment_variable>
        <environment_variable name="LOCAL_DB">/dev/shm/gxdb</environment_variable>
    </environment_variables>
    <inputs>
        <conditional name="mode">
            <param name="mode_selector" type="select" label="Choose the mode">
                <option value="screen" selected="true">Screen genome</option>
                <option value="clean">Clean genome</option>
            </param>
            <when value="screen">
                <param argument="--fasta" type="data" format="fasta" label="Input file (Fasta file)" help="To detect contamination from foreign organisms, a genome assembly in a fasta file." />
                <!-- https://www.ncbi.nlm.nih.gov/taxonomy -->
                <param argument="--tax-id" type="text" label="Taxonomic identifier" help="The appropriate tax-id for your genome assembly.  The appropriate tax-id for an organism can be retrieved from the NCBI Taxonomy website." />
                <param argument="--species" type="text" label="Species binomial name" />
                <!-- comma separated list of taxa to ignore in GX_ALIGN_EXCLUDE_TAXA environment variable -->
                <param name="gx_align_exclude_taxa" type="text" value="" optional="true" label="Taxonomic identifier(s) to exclude" help="Multiple tax-ids may be provided as a comma-separated list.">
                    <validator type="regex" message="comma separated integers">^\s*\d+\s*(,\s*\d+\s*)*$</validator>
                    <sanitizer invalid_char="">
                      <valid initial="string.digits">
                          <add value="," />
                      </valid>
                    </sanitizer>
                </param>
                <param argument="--split-fasta" type="boolean" checked="true" label="Split fasta sequences on N-runs of length at least 10" />
                <param argument="--div" type="text" value="" label="BLAST-div of the tax-id" help="from 'NCBI BLAST name' on taxon Info page" />
                <!-- if not specified, will mask for euks only -->
                <param argument="--mask-transposons" type="boolean" checked="false" label="mask transposons in the input" />
                <param argument="--allow-same-species" type="boolean" checked="false" label="Whether to use same-species hits as evidence" />
                <param argument="--action-report" type="boolean" checked="true" label="Generate action report" />
                <param argument="--save-hits" type="boolean" checked="false" label="Save intermediate alignments" />
                <param argument="--generate-logfile" type="boolean" checked="false" label="Redirect stdout and stderr to file" />
            </when>
            <when value="clean">
                <param argument="--input" type="data" format="fasta" label="Input file (Fasta file)" help="To detect contamination from foreign organisms, a genome assembly in a fasta file." />
                <param argument="--action-report" type="data" format="tabular" label="Select action report" />
                <param argument="--min-seq-len" type="integer" value="200" label="Minimumm sequence length to keep" />
            </when>
        </conditional>
    </inputs>
    <outputs>
        <!-- note, both have ## header with metadata in json format -->
        <!-- note, both have # header with column names -->
        <!-- can we get Galaxy to use the 2nd line fo rcolumn_names? -->
        <data format="tabular" name="taxonomy_report" from_work_dir="output.taxonomy.rpt" label="${tool.name} on ${on_string}: Taxonomy report">
            <filter>mode_selector == 'screen'</filter>
            <actions>
                <action name="column_names" type="metadata" default="seq-id,seq-len,(xp.lc.co.n)-len,cvg-by-all,sep1,tax-name-1,tax-id-1,div-1,cvg-by-div-1,cvg-by-tax-1,score-1,sep2,tax-id-2,div-2,cvg-by-div-2,cvg-by-tax-2,score-2,sep3,tax-id-3,div-3,cvg-by-div-3,cvg-by-tax-3,score-3,sep4,tax-id-4,div-4,cvg-by-div-4,cvg-by-tax-4,score-4,sep5,weight,result,div,div_pct_cvg" />
            </actions>
        </data>

        <data format="tabular" name="action_report" from_work_dir="output.fcs_gx_report.txt" label="${tool.name} on ${on_string}: Action report">
            <filter>mode_selector == 'screen' and mode['action_report']</filter>
            <actions>
                <action name="column_names" type="metadata" default="seq_id,start_pos,end_pos,seq_len,action,div,agg_cont_cov,top_tax_name" />
            </actions>
        </data>

        <!-- the "eyeball" screws up the first line.  Comment lines should not be expanded, double check -->
        <data format="tabular" name="hits" from_work_dir="output.hits.tsv.gz" label="${tool.name} on ${on_string}: Intermediate alignments">
            <filter>mode_selector == "screen' and mode['save_hits']</filter>
            <actions>
                <action name="column_names" type="metadata" default="q-id,q-pos1,s-taxid,s-id,s-pos1,len,matchruns-L2,mismatches" />
            </actions>
        </data>

        <data format="txt" name="logfile" from_work_dir="output.summary.txt" label="${tool.name} on ${on_string}: Log file">
            <filter>mode_selector == 'screen' and mode['generate_logfile']</filter>
        </data>
    </outputs>
    <help><![CDATA[
    TODO: Fill in help.
    ]]></help>
    <expand macro="citations" />
</tool>
