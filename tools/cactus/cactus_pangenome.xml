<tool id="cactus_pangenome" name="Cactus within-species," version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@" license="MIT">
    <description>pangenome alignment.</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="xrefs"/>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
        ## Set up seqfile
        
        #for $seq in $in_seqs:
            #set seq_fn = str($seq.label) + '.' + $seq.fasta.ext
            ln -s '$seq.fasta' '$seq_fn' &&
            printf '%s %s\n' '$seq.label' '$seq_fn' >> seqfile.txt &&
        #end for

        cat seqfile.txt &&    

        ## If we're doing a pangenome, we need to run the steps manually
        minigraph -xggs
        #for $seq in $in_seqs:
            $seq.fasta 
        #end for
        > pangenome.gfa
        &&
        cactus-graphmap
        ./jobStore
        ./seqfile.txt
        pangenome.gfa
        pangenome.paf 
        --outputFasta pangenome.gfa.fa
        --binariesMode local
        --workDir ./
        &&
        cactus-align
        ./jobStore
        ./seqfile.txt
        pangenome.paf 
        alignment.hal
        --pangenome
        --pafInput
        --binariesMode local
        --workDir ./

        ## I don't think we can use the .hal, make a .maf too
        &&
        hal2maf alignment.hal alignment.maf

        ## what are these for? 
        ## hal2fasta HALFILE $(halStats --root HALFILE) --subtree --upper > gfatemp.fa
        ## hal2paf HALFILE --hdf5InMemory --onlySequenceNames > gfatemp.paf
        ## seqwish -p gfatemp.paf -s gfatemp.fa -g out.gfa

        ## if assemblyhub output
        ## hal2assemblyHub.py WORKDIR HALFILE OUTDIR

        ## if pangenome (.pg) output
        ## hal2vg input.hal --hdf5InMemory --chop 32 --progress > output.pg
    ]]></command>
    <inputs>
        <expand macro="fasta_input" />
    </inputs>
    <outputs>
        <expand macro="cactus_outputs" />
    </outputs>
    <tests>
        <!-- within-species mode -->
        <test expect_num_outputs="2">
            <repeat name="in_seqs">
                <param name="label" value="simCow_chr6"/>
                <param name="fasta" value="simCow_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simDog_chr6"/>
                <param name="fasta" value="simDog_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simHuman_chr6"/>
                <param name="fasta" value="simHuman_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simMouse_chr6"/>
                <param name="fasta" value="simMouse_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simRat_chr6"/>
                <param name="fasta" value="simRat_chr6.fasta"/>
            </repeat>
            <output name="out_hal" file="within.hal" />
            <output name="out_maf" file="within.maf" />
        </test>


    </tests>
    <help><![CDATA[

.. class:: infomark

**What it does**

TODO: Fill in help in reStructuredText format (https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html)
Hint: If you want, you can preview your help section using this online editor: http://rst.ninjs.org/

Usage
.....


**Input**


**Output**


    ]]></help>
    <expand macro="citations"/>
</tool>