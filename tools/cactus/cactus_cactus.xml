<tool id="cactus_cactus" name="Cactus" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@" license="MIT">
    <description>whole-genome multiple sequence alignment.</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="xrefs"/>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
        ## Set up seqfile
        
        #if $aln_mode.aln_mode_select == 'interspecies':
            cat $aln_mode.in_tree >> seqfile.txt &&
        #end if
        #for $seq in $in_seqs:
            #set seq_fn = str($seq.label) + '.' + $seq.fasta.ext
            ln -s '$seq.fasta' '$seq_fn' &&
            printf '%s %s\n' '$seq.label' '$seq_fn' >> seqfile.txt &&
        #end for
        cat seqfile.txt &&
    
        ## printf 'aln_mode: %s' $aln_mode
        #if $aln_mode.aln_mode_select == 'intraspecies':
            ## If we're doing a pangenome, we need to run the steps manually
            minigraph -xggs
            #for $seq in $in_seqs:
                $seq.fasta 
            #end for
            > pangenome.gfa
            &&
            cactus-graphmap
            ./jobStore
            ./seqfile.txt
            pangenome.gfa
            pangenome.paf 
            --outputFasta pangenome.gfa.fa
            --binariesMode local
            --workDir ./
            &&
            cactus-align
            ./jobStore
            ./seqfile.txt
            pangenome.paf 
            alignment.hal
            --pangenome
            --pafInput
            --binariesMode local
            --workDir ./
        #else if $aln_mode.aln_mode_select == 'interspecies':
            ## Run cactus normally
            cactus ./jobStore ./seqfile.txt ./alignment.hal 
            --root mr 
            --binariesMode local 
            --workDir ./
        #end if
        ## I don't think we can use the .hal, make a .maf too
        &&
        
        hal2maf alignment.hal
        #if str($ref_level):
            --refGenome '$ref_level'
        #end if
        alignment.maf

        ## what are these for? 
        ## hal2fasta HALFILE $(halStats --root HALFILE) --subtree --upper > gfatemp.fa
        ## hal2paf HALFILE --hdf5InMemory --onlySequenceNames > gfatemp.paf
        ## seqwish -p gfatemp.paf -s gfatemp.fa -g out.gfa

        ## if assemblyhub output
        ## hal2assemblyHub.py WORKDIR HALFILE OUTDIR

        ## if pangenome (.pg) output
        ## hal2vg input.hal --hdf5InMemory --chop 32 --progress > output.pg
    ]]></command>
    <inputs>
        <conditional name="aln_mode">
            <param name="aln_mode_select" type="select" label="Alignment mode" help="The taxonomic relationship between input genomes. If genomes are from multiple individuals of the same species, select 'Within-species'">
                <option value="interspecies" selected="true">Between-species</option>
                <option value="intraspecies">Within-species</option>
            </param>
            <when value="interspecies">
                <param name="in_tree" type="data" format="nhx" label="Guide tree" help="Phylogenetic tree in Newick format. Required by Cactus to achieve linear scaling with number of input genomes" />
            </when>
            <when value="intraspecies">
            </when>
        </conditional>
        <expand macro="fasta_input" />
        <param name="ref_level" type="text" optional="True" value="" label="Optional: reference genome for MAF" help="Specify one of the Input Genomes as the reference level for the Multiple Alignment Format (MAF) file. This must match the label used in 'Genome Label'. If nothing is specified, the first Input Genome will be the reference genome in the MAF file. This option doesn't affect the HAL output." />
    </inputs>
    <outputs>
        <expand macro="cactus_outputs" />
    </outputs>
    <tests>
        <!-- test interspecies mode -->
        <test expect_num_outputs="2">
            <conditional name="aln_mode">
                <param name="aln_mode_select" value="interspecies"/>
                <param name="in_tree" value="test_tree.nhx"/>
            </conditional>
            <repeat name="in_seqs">
                <param name="label" value="simCow_chr6"/>
                <param name="fasta" value="simCow_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simDog_chr6"/>
                <param name="fasta" value="simDog_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simHuman_chr6"/>
                <param name="fasta" value="simHuman_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simMouse_chr6"/>
                <param name="fasta" value="simMouse_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simRat_chr6"/>
                <param name="fasta" value="simRat_chr6.fasta"/>
            </repeat>
            <output name="out_hal" file="evolverMammals.hal" />
            <output name="out_maf" file="evolverMammals.maf" />
        </test>
        <!-- within-species mode -->
        <test expect_num_outputs="2">
            <conditional name="aln_mode">
                <param name="aln_mode_select" value="intraspecies"/>
            </conditional>
            <repeat name="in_seqs">
                <param name="label" value="simCow_chr6"/>
                <param name="fasta" value="simCow_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simDog_chr6"/>
                <param name="fasta" value="simDog_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simHuman_chr6"/>
                <param name="fasta" value="simHuman_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simMouse_chr6"/>
                <param name="fasta" value="simMouse_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simRat_chr6"/>
                <param name="fasta" value="simRat_chr6.fasta"/>
            </repeat>
            <output name="out_hal" file="within.hal" />
            <output name="out_maf" file="within.maf" />
        </test>
        <!-- test reference level selection in MAF format -->
        <test expect_num_outputs="2">
            <conditional name="aln_mode">
                <param name="aln_mode_select" value="intraspecies"/>
            </conditional>
            <repeat name="in_seqs">
                <param name="label" value="simCow_chr6"/>
                <param name="fasta" value="simCow_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simDog_chr6"/>
                <param name="fasta" value="simDog_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simHuman_chr6"/>
                <param name="fasta" value="simHuman_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simMouse_chr6"/>
                <param name="fasta" value="simMouse_chr6.fasta"/>
            </repeat>
            <repeat name="in_seqs">
                <param name="label" value="simRat_chr6"/>
                <param name="fasta" value="simRat_chr6.fasta"/>
            </repeat>
            <param name="ref_level" value="simMouse_chr6" />
            <output name="out_hal" file="ref_level.hal" />
            <output name="out_maf" file="ref_level.maf" />
        </test>
    </tests>
    <help><![CDATA[

.. class:: infomark

**What it does**

`Cactus <https://github.com/ComparativeGenomicsToolkit/cactus>`__ is a
reference-free whole-genome multiple alignment program. It can be used
to progressively align a large number of genomes.

**Usage**

**Between-species mode**

If you are aligning genomes from **multiple species**, you need to
provide a guide tree in Newick format. Cactus uses the guide tree to
progressively align genomes, meaning that it doesn’t need to align all
possible pairs of genomes.

A Newick-formatted tree for human, chimp and gorilla genomes looks like
this:

::

   (((human:0.006,chimp:0.006667):0.0022,gorilla:0.008825):0.0096,orang:0.01831);

The numbers are the branch lengths.

**Beta: Within-species mode**

You can also run Cactus in `pangenome
mode <https://github.com/ComparativeGenomicsToolkit/cactus/blob/master/doc/pangenome.md>`__
to align genomes of multiple individuals from the **same species**. In
this mode you will not be able to provide a guide tree. Cactus will use
`minigraph <https://github.com/lh3/minigraph>`__ to generate a graph of
the input genomes and then use the graph to order the alignments. To use
pangenome mode, select ‘Within-species’ in the ‘Alignment mode’
dropdown.

**Input**

The developers recommend soft-masking your genomes with RepeatMasker
before running Cactus. RepeatMasker is available on Galaxy.

If you’re using Between-species mode, you need to provide labels for the
fasta files that match the leaves on the guide tree. In the example
above, you would use the label ‘human’ for the human fasta file.

**Output**

The main output of Cactus is in `HAL
format <https://github.com/ComparativeGenomicsToolkit/cactus#using-the-output>`__,
which is not yet supported by other Galaxy tools. The Galaxy version of
Cactus also exports a Multiple Alignment Format (MAF) file. Note that
the MAF file is **reference-based**, so it will contain alignments to a
single reference from your list of inputs (i.e. not a graph). By
default, the first input genome will be used as the reference. You can
override this with the ‘reference genome’ option.



    ]]></help>
    <expand macro="citations"/>
</tool>