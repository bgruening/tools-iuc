<tool id="seurat" name="Seurat" version="@TOOL_VERSION@+galaxy0">
    <description>- toolkit for exploration of single-cell RNA-seq data</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[

## plot variable set
#if "vln" in $meta.plots:
    #set $vln = 'T'
#else
    #set $vln = 'F'
#end if
#if "feat" in $meta.plots:
    #set $feat = 'T'
#else
    #set $feat = 'F'
#end if
#if "PCs" in $meta.plots:
    #set $PCs = 'T'
#else
    #set $PCs = 'F'
#end if
#if "tsne" in $meta.plots:
    #set $tsne = 'T'
#else
    #set $tsne = 'F'
#end if
#if "heat" in $meta.plots:
    #set $heatmaps = 'T'
#else
    #set $heatmaps = 'F'
#end if

## run variable set
#if $step_select.step == "start":
    Rscript -e "library(\"rmarkdown\"); render(\"$__tool_directory__/Seurat.R\",
    params = list(counts = \"${step_select.input}\",
    start_step = "\"0"\",
    min_cells = \"${step_select.min_cells}\",
    min_genes = \"${step_select.min_genes}\",
    low_thresholds = \"${step_select.low_thresholds}\",
    high_thresholds = \"${step_select.high_thresholds}\",
    norm_out = \"${step_select.norm_file}\",
    #if $step_select.variable_continue.variable_continue == "yes":
        variable_out = \"${step_select.variable_continue.var_file}\",
        #if $step_select.variable_continue.pca_continue.pca_continue == "yes":
            numPCs = \"${step_select.variable_continue.pca_continue.num_PCs}\",
            pca_out = \"${step_select.variable_continue.pca_continue.pca_file}\",
            #if '$step_select.variable_continue.pca_continue.clusters_continue.clusters_continue' == "yes":
                perplexity = \"${step_select.variable_continue.pca_continue.clusters_continue.perplexity}\",
                resolution = \"${step_select.variable_continue.pca_continue.clusters_continue.resolution}\",
                clusters_file = \"${step_select.variable_continue.pca_continue.clusters_continue.clusters_file}\",
                #if '$step_select.variable_contine.pca_continue.clusters_continue.markers_continue.markers_continue' == "yes":
                    min_pct = \"${step_select.variable_continue.pca_continue.clusters_continue.markers_continue.min_pct}\",
                    logfc_threshold = \"${step_select.variable_continue.pca_continue.clusters_continue.markers_continue.logfc_threshold}\",
                    markers_file = \"${step_select.variable_continue.pca_continue.clusters_continue.markers_continue.markers_file}\",
                #else:
                    end_step="\"4"\",
                #end if
            #else:
                end_step="\"3"\",
            #end if
        #else:
            end_step="\"2"\",
        #end if
    #else:
        end_step="\"1"\",
    #end if
    varstate = \"${meta.varstate}\",
    showcode = \"${meta.showcode}\",
    vlnfeat = \"$vln\",
    featplot = \"$feat\",
    PCplots = \"$PCs\",
    tsne = \"$tsne\",
    heatmaps = \"$heatmaps\"),
    intermediates_dir = \".\",
    output_format = html_document(),
    output_dir = \".\",
    output_file = \"out.html\")"
## #else if  $step_select.step == "norm":
##     Rscript -e "library(\"rmarkdown\"); render(\"$__tool_directory__/Seurat.R\",
##     params = list(input = \"${step_select.input}\",
##     start_step = \"1\",
##     low_thresholds = \"${step_select.low_thresholds}\",
##     high_thresholds = \"${step_select.high_thresholds}\",
##     #if '$step_select.variable_continue' == "yes":
##         #if '$step_select.variable_continue.pca_continue' == "yes":
##             numPCs = \"${step_select.variable_continue.pca_continue.num_PCs}\",
##             #if '$step_select.variable_continue.pca_continue.clusters_continue' == "yes":
##                 perplexity = \"${step_select.variable_continue.pca_continue.clusters_continue.perplexity}\",
##                 resolution = \"${step_select.variable_continue.pca_continue.clusters_continue.resolution}\",
##                 #if '$step_select.variable_contine.pca_continue.clusters_contine.markers_continue' == "yes":
##                     min_pct = \"${step_select.variable_continue.pca_continue.clusters_continue.markers_continue.min_pct}\",
##                     logfc_threshold = \"${step_select.variable_continue.pca_continue.clusters_continue.markers_continue.logfc_threshold}\",
##                 #else:
##                     end_step="4",
##                 #end if
##             #else:
##                 end_step="3",
##             #end if
##         #else:
##             end_step="2",
##         #end if
##     #else:
##         end_step="1",
##     #end if
##     warn = \"${meta.warn}\",
##     varstate = \"${meta.varstate}\",
##     showcode = \"${meta.showcode}\",
##     vlnfeat = \"$vln\",
##     featplot = \"$feat\",
##     PCplots = \"$PCs\",
##     tsne = \"$tsne\",
##     heatmaps = \"$heatmaps\"),
##     intermediates_dir = \".\",
##     output_format = html_document(),
##     output_dir = \".\",
##     output_file = \"out.html\")"
## #else if  $step_select.step == "variable":
##     Rscript -e "library(\"rmarkdown\"); render(\"$__tool_directory__/Seurat.R\",
##     params = list(input = \"${step_select.input}\",
##     start_step = \"2\",
##     #if '$step_select.pca_continue' == "yes":
##         numPCs = \"${step_select.pca_continue.num_PCs}\",
##         #if '$step_select.pca_continue.clusters_continue' == "yes":
##             perplexity = \"${step_select.pca_continue.clusters_continue.perplexity}\",
##             resolution = \"${step_select.pca_continue.clusters_continue.resolution}\",
##             #if '$step_select.pca_continue.clusters_contine.markers_continue' == "yes":
##                 min_pct = \"${step_select.pca_continue.clusters_continue.markers_continue.min_pct}\",
##                 logfc_threshold = \"${step_select.pca_continue.clusters_continue.markers_continue.logfc_threshold}\",
##             #else:
##                 end_step="4",
##             #end if
##         #else:
##             end_step="3",
##         #end if
##     #else:
##         end_step="2",
##     #end if
##     warn = \"${meta.warn}\",
##     varstate = \"${meta.varstate}\",
##     showcode = \"${meta.showcode}\",
##     vlnfeat = \"$vln\",
##     featplot = \"$feat\",
##     PCplots = \"$PCs\",
##     tsne = \"$tsne\",
##     heatmaps = \"$heatmaps\"),    
##     intermediates_dir = \".\",
##     output_format = html_document(),
##     output_dir = \".\",
##     output_file = \"out.html\")"
## #else if  $step_select.step == "pca":
##     Rscript -e "library(\"rmarkdown\"); render(\"$__tool_directory__/Seurat.R\",
##     params = list(input = \"${step_select.input}\",
##     start_step = \"3\",
##     numPCs = \"${step_select.num_PCs}\",
##     #if $step_select.clusters_continue == "yes":    
##         perplexity = \"${step_select.clusters_continue.perplexity}\",
##         resolution = \"${step_select.clusters_continue.resolution}\",
##         #if '$step_select.clusters_contine.markers_continue' == "yes":
##             min_pct = \"${step_select.clusters_continue.markers_continue.min_pct}\",
##             logfc_threshold = \"${step_select.clusters_continue.markers_continue.logfc_threshold}\",
##         #else:
##             end_step="4",
##         #end if
##     #else:
##         end_step="3",
##     #end if
##     warn = \"${meta.warn}\",
##     varstate = \"${meta.varstate}\",
##     showcode = \"${meta.showcode}\",
##     vlnfeat = \"$vln\",
##     featplot = \"$feat\",
##     PCplots = \"$PCs\",
##     tsne = \"$tsne\",
##     heatmaps = \"$heatmaps\"),
##     intermediates_dir = \".\",
##     output_format = html_document(),
##     output_dir = \".\",
##     output_file = \"out.html\")"
## #else if  $step_select.step == "clusters":
##     Rscript -e "library(\"rmarkdown\"); render(\"$__tool_directory__/Seurat.R\",
##     params = list(input = \"${step_select.input}\",
##     start_step = \"5\",
##     perplexity = \"${step_select.perplexity}\",
##     resolution = \"${step_select.resolution}\",
##     #if $step_select.markers_continue == "yes":    
##         min_pct = \"${step_select.markers_continue.min_pct}\",
##         logfc_threshold = \"${step_select.markers_continue.logfc_threshold}\",
##     #else:
##         end_step="4",
##     #end if
##     warn = \"${meta.warn}\",
##     varstate = \"${meta.varstate}\",
##     showcode = \"${meta.showcode}\",
##     vlnfeat = \"$vln\",
##     featplot = \"$feat\",
##     PCplots = \"$PCs\",
##     tsne = \"$tsne\",
##     heatmaps = \"$heatmaps\"),
##     intermediates_dir = \".\",
##     output_format = html_document(),
##     output_dir = \".\",
##     output_file = \"out.html\")"
## #else if  $step_select.step == "markers":
##     Rscript -e "library(\"rmarkdown\"); render(\"$__tool_directory__/Seurat.R\",
##     params = list(input = \"${step_select.input}\",
##     start_step = \"6\",
##     end_step = \"6\",
##     min_pct = \"${step_select.min_pct}\",
##     logfc_threshold = \"${step_select.logfc_threshold}\",
##     warn = \"${meta.warn}\",
##     varstate = \"${meta.varstate}\",
##     showcode = \"${meta.showcode}\",
##     vlnfeat = \"$vln\",
##     featplot = \"$feat\",
##     PCplots = \"$PCs\",
##     tsne = \"$tsne\",
##     heatmaps = \"$heatmaps\"),
##     intermediates_dir = \".\",
##     output_format = html_document(),
##     output_dir = \".\",
##     output_file = \"out.html\")"
#end if
## Rscript -e "library(\"rmarkdown\"); render(\"$__tool_directory__/Seurat.R\",
##     params = list(counts = \"${step_select.input}\",
##         min_cells = \"${adv.min_cells}\",
##         min_genes = \"${adv.min_genes}\",
##         low_thresholds = \"${adv.low_thresholds}\",
##         high_thresholds = \"${adv.high_thresholds}\",
##         numPCs = \"${adv.num_PCs}\",
##         cells_use = \"${adv.cells_use}\",
##         resolution = \"${adv.resolution}\",
##         perplexity = \"${adv_perplexity}\",
##         min_pct = \"${adv.min_pct}\",
##         logfc_threshold = \"${adv.logfc_threshold}\",
##         warn = \"${meta.warn}\",
##         varstate = \"${meta.varstate}\",
##         showcode = \"${meta.showcode}\",
##         vlnfeat = \"$vln\",
##         featplot = \"$feat\",
##         PCplots = \"$PCs\",
##         tsne = \"$tsne\",
##         heatmaps = \"$heatmaps\"),
##     intermediates_dir = \".\",
##     output_format = html_document(),
##     output_dir = \".\",
##     output_file = \"out.html\")"
    ]]></command>
    <inputs>     
        <conditional name="step_select">
            <param name="step" type="select" label="Select start step">
                <option value="start">Start from a conuts file </option>
                <option value="norm">Normalizing</option>
                <option value="variable">Variable Features and Scaling</option>
                <option value="pca">PCA</option>
                <option value="clusters">Cluster</option>
                <option value="markers">Markers</option>
            </param>
            <when value="start">
                <expand macro="start"/>
            </when>
            <when value="norm">
                <param name="input" type="data" format="rdata" label="Input file for the normalization step"/>
                <expand macro="norm"/>
            </when>
            <when value="variable">
                <param name="input" type="data" format="rdata" label="Input file to identify variable features"/>
                <expand macro="variable"/>      
            </when>
            <when value="pca">
                <param name="input" type="data" format="rdata" label="Input file for the PCA step"/>
                <expand macro="pca"/>
            </when>
            <when value="clusters">
                <param name="input" type="data" format="rdata" label="Input file for the clustering step"/>
                <expand macro="clusters"/>    
            </when>
            <when value="markers">
                <param name="input" type="data" format="rdata" label="Input file for the marker identification step"/>
                <expand macro="markers"/>      
            </when>
        </conditional>
        <section name="meta" title="Output options" expanded="true">
            <param name="showcode" type="boolean" truevalue="T" falsevalue="F" checked="false" label="Show code alongside outputs?"/>
            <param name="warn" type="boolean" truevalue="T" falsevalue="F" checked="false" label="Include warnings in the output file (Yes) or pipe to stdout (No)"/>
            <param name="varstate" type="boolean" truevalue="T" falsevalue="F" checked="false" label="Display variable values used in code at the beginning of output file?"/>
            <param name="plots" type="select" optional="true" multiple="true" display="checkboxes" label="Which plots should be output?">
                <option value="vln" selected="true">Violin and Scatter plots</option>
                <option value="feat" selected="true">Feature counts plots</option>
                <option value="PCs" selected="true">PC plots</option>
                <option value="tsne" selected="true">tSNE and UMAP plots</option>
                <option value="heat" selected="true">Heatmap plots</option>
            </param>
        </section>
    </inputs>
    <outputs>
        <data name="out_html" format="html" from_work_dir="out.html" label="${tool.name} on ${on_string}" />
        <data name="norm_out" format="rdata" from_work_dir="norm_out.rds" label="${tool.name} on ${on_string}: normalization intermediate output">
            <filter>step_select['norm_file']</filter>
        </data>
        <data name="var_out" format="rdata" from_work_dir="var_out.rds" label="${tool.name} on ${on_string}: normalization and scaling intermediate output">
            <filter>step_select['variable_continue']['variable_continue'] == "yes" and step_select['variable_continue']['var_file']</filter>
        </data>
        <data name="pca_out" format="rdata" from_work_dir="pca_out.rds" label="${tool.name} on ${on_string}: PCA embedding data">
            <filter>step_select['variable_continue']['pca_continue']['pca_continue'] == "yes" and step_select['variable_continue']['pca_continue']['pca_file']</filter>
        </data>
        <!-- <data name="cluters_out" format="rdata" from_work_dir="tsne_out.rds" label="${tool.name} on ${on_string}: TSNE embedding data">
            <filter>step_select['variable_continue']['pca_continue']['clusters_continue']['clusters_continue'] == "yes" and step_select['variable_continue']['pca_continue']['clusters_contine']['tsne_file'] == "T"</filter>
        </data>
        <data name="umap_out" format="rdata" from_work_dir="umap_out.rds" label="${tool.name} on ${on_string}: UMAP embedding data">
            <filter>step_select['variable_continue']['pca_continue']['clusters_continue']['clusters_continue'] == "yes" and step_select['variable_continue']['pca_continue']['clusters_contine']['tsne_file'] == "T"</filter>
        </data>
        <data name="markers_out" format="rdata" from_work_dir="markers_out.rds" label="${tool.name} on ${on_string}: Markers">
            <filter>step_select['variable_continue']['pca_continue']['clusters_continue']['markers_continue']['markers_continue'] == "yes" and step_select['variable_continue']['pca_continue']['clusters_contine']['markers_continue']['markers_file'] == "T"</filter>
        </data>
        <data name="protmarkerst" format="tabular" from_work_dir="protein_out.rds" label="${tool.name} on ${on_string}: Protein markers">
            <filter>function["function_select"] == "cite" and 'markers' in meta['inter']</filter>
        </data>
        <data name="rnamarkerst" format="tabular" from_work_dir="rna_out.rds" label="${tool.name} on ${on_string}: RNA markers">
            <filter>function["function_select"] == "cite" and 'markers' in meta['inter']</filter>
        </data>
        <data name="cite_graps" format="pdf" from_work_dir="citeseq_out.pdf" label="${tool.name} on ${on_string}: Citeseq graphs">
            <filter>function["function_select"] == 'cite' and function['marker_compare']['marker_compare'] == "yes"</filter>
        </data> -->
    </outputs>
    <!-- <tests>
        <test>
            <param name="counts" ftype="tabular" value="counts.tab.gz"/>
            <section name="adv">
                <param name="numPCs" value="10" />
                <param name="min_cells" value="3"/>
                <param name="min_genes" value="200"/>
                <param name="low_thresholds" value="1" />
                <param name="high_thresholds" value="20000000" />
                <param name="cells_use" value="500"/>
                <param name="resolution" value="0.6" />
                <param name="min_pct" value="0.25" />
                <param name="logfc_threshold" value="0.25" />
            </section>
            <section name="meta">
                <param name="showcode" value="T"/>
                <param name="warn" value="F"/>
                <param name="varstate" value="F"/>
                <param name="plots" value="feat"/>
            </section>
            <output name="out_html" ftype="html">
                <assert_contents>
                    <has_text text="Seurat Analysis" />
                    <has_text text="Performed using Galaxy" />
                    <has_text text="img src=&quot;data:image/png;base64" />
                </assert_contents>
            </output>
        </test>
        <test> perplexity test
            <param name="counts" ftype="tabular" value="counts.tab.gz"/>
            <section name="adv">
                <param name="numPCs" value="10" />
                <param name="min_cells" value="3"/>
                <param name="min_genes" value="200"/>
                <param name="low_thresholds" value="1" />
                <param name="high_thresholds" value="20000000" />
                <param name="cells_use" value="500"/>
                <param name="resolution" value="0.6" />
                <param name="perplexity" value="16" />
                <param name="min_pct" value="0.25" />
                <param name="logfc_threshold" value="0.25" />
            </section>
            <section name="meta">
                <param name="showcode" value="T"/>
                <param name="warn" value="F"/>
                <param name="varstate" value="F"/>
                <param name="plots" value="feat"/>
            </section>
            <output name="out_html" ftype="html">
                <assert_contents>
                    <has_text text="Seurat Analysis" />
                    <has_text text="Performed using Galaxy" />
                    <has_text text="img src=&quot;data:image/png;base64" />
                </assert_contents>
            </output>
        </test>
    </tests> -->
    <help><![CDATA[
.. class:: infomark

**What it does**

Seurat_ is a toolkit for quality control, analysis, and exploration of single cell RNA sequencing data.
It is developed and maintained by the `Satija Lab`_ at NYGC. Seurat aims to enable users to identify and
interpret sources of heterogeneity from single cell transcriptomic measurements, and to integrate diverse
types of single cell data. See the `Seurat Guided Clustering tutorial`_ for more information.

-----

**Inputs**

    * Gene count matrix in TAB-separated format

-----

**Outputs**

    * HTML of plots

Optionally you can choose to output

    * R commands used to generate plots printed alongside figures

.. _Seurat: https://www.nature.com/articles/nbt.4096
.. _Satija Lab: https://satijalab.org/seurat/
.. _Seurat Guided Clustering tutorial: https://satijalab.org/seurat/pbmc3k_tutorial.html

]]></help>
    <citations>
        <citation type="doi">10.1038/nbt.4096</citation>
    </citations>
</tool>
