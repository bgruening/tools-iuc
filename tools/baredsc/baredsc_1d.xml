<tool id="baredsc_1d" name="baredSC 1d" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="20.01" license="MIT">
    <description>Compute distribution for a single gene</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <edam_operations>
        <edam_operation>operation_2495</edam_operation>
        <!-- only baredSC_2d:-->
        <edam_operation>operation_3463</edam_operation>
    </edam_operations>
    <xrefs>
        <xref type="bio.tools">baredsc</xref>
    </xrefs>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
    baredSC_1d
    ## Required inputs:
    #if str( $input_counts.filetype ) == "tabular":
        --input '$input_counts.input'
    #elif str( $input_counts.filetype ) == "anndata":
        --inputAnnData '$input_counts.inputAnnData'
    #end if
    --geneColName '$geneColName'

    ## Filter cells
    #if str( $filter.nb ) == "1":
        --metadata1ColName '$filter.metadata1ColName'
        --metadata1Values '$filter.metadata1Values'
    #elif str( $filter.nb ) == "2":
        --metadata1ColName '$filter.metadata1ColName'
        --metadata1Values '$filter.metadata1Values'
        --metadata2ColName '$filter.metadata2ColName'
        --metadata2Values '$filter.metadata2Values'
    #elif str( $filter.nb ) == "3":
        --metadata1ColName '$filter.metadata1ColName'
        --metadata1Values '$filter.metadata1Values'
        --metadata2ColName '$filter.metadata2ColName'
        --metadata2Values '$filter.metadata2Values'
        --metadata3ColName '$filter.metadata3ColName'
        --metadata3Values '$filter.metadata3Values'
    #end if

    ## MCMC
    --xmin $MCMC.xmin
    --xmax $MCMC.xmax
    --xscale '$MCMC.xscale.type'
    #if str( $MCMC.xscale.type ) == "Seurat":
        --targetSum $MCMC.xscale.targetSum
    #end if
    --nx $MCMC.nx
    --minScale $MCMC.minScale
    --nnorm $MCMC.nnorm
    --nsampMCMC $MCMC.nsampMCMC
    --seed $MCMC.seed
    #if str( $MCMC.automaticRestart.set_minNeff ) == "yes":
        --minNeff $MCMC.automaticRestart.minNeff
    #end if
    
    ## Plots
    #if str( $plots.title ) != '':
        --title '$plots.title'
    #end if
    #if $plots.removeFirstSamples != -1:
        --removeFirstSamples $plots.removeFirstSamples
    #end if
    --nsampInPlot $plots.nsampInPlot
    #if $plots.prettyBins != -1:
        --prettyBins $plots.prettyBins
    #end if

    ## Advanced
    --osampx $advanced.osampx
    --osampxpdf $advanced.osampxpdf
    #if str( $advanced.burn.custom ) == "yes":
        #if str( $advanced.burn.nsampBurnMCMC ) != "-1":
            --nsampBurnMCMC $advanced.burn.nsampBurnMCMC
        #end if
        --T0BurnMCMC $advanced.burn.T0BurnMCMC
    #end if
    --coviscale $advanced.coviscale
    --nis $advanced.nis
    
    ## Outputs
    --output output
    --figure baredSC.$plots.image_file_format
    --logevidence logevidence.txt &&
    mkdir QC &&
    mv baredSC_convergence.* QC &&
    mv baredSC_p.$plots.image_file_format QC &&
    mv baredSC_corner.* QC &&
    mkdir output &&
    mv baredSC_neff.txt output &&
    mv baredSC_pdf.txt output &&
    mv baredSC.$plots.image_file_format baredSC &&
    gunzip baredSC_means.txt.gz
    ]]></command>
    <inputs>
        <conditional name="input_counts">
            <param name="filetype" type="select" label="Input type">
                <option value="tabular">Tabular</option>
                <option value="anndata">Anndata (for example from Scanpy)</option>
            </param>
            <when value="tabular">
                <param argument="--input" type="data" format="tabular" label="Input table (with header)" help="Expected format is one line per cell, columns with raw counts and one column 'nCount_RNA' with the total number of UMI per cell (optionally other meta data to filter)" />
            </when>
            <when value="anndata">
                <param argument="--inputAnnData" type="data" format="anndata" label="AnnData containing raw counts" />
            </when>
        </conditional>
        <param argument="--geneColName" type="text" value="" label="Name of the column with gene counts."/>
        <conditional name="filter">
            <param name="nb" type="select" label="How many filters columns do you need?">
                <option value="0">0 (keep all cells from file)</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
            </param>
            <when value="0"/>
            <when value="1">
                <param argument="--metadata1ColName" type="text" value="" label="Name of the column with first filter."/>
                <param argument="--metadata1Values" type="text" value="" label="Values accepted in this column (separated by comma)."/>
            </when>
            <when value="2">
                <param argument="--metadata1ColName" type="text" value="" label="Name of the column with first filter."/>
                <param argument="--metadata1Values" type="text" value="" label="Values accepted in this column (separated by comma)."/>
                <param argument="--metadata2ColName" type="text" value="" label="Name of the column with second filter."/>
                <param argument="--metadata2Values" type="text" value="" label="Values accepted in this column (separated by comma)."/>
            </when>
            <when value="3">
                <param argument="--metadata1ColName" type="text" value="" label="Name of the column with first filter."/>
                <param argument="--metadata1Values" type="text" value="" label="Values accepted in this column (separated by comma)."/>
                <param argument="--metadata2ColName" type="text" value="" label="Name of the column with second filter."/>
                <param argument="--metadata2Values" type="text" value="" label="Values accepted in this column (separated by comma)."/>
                <param argument="--metadata3ColName" type="text" value="" label="Name of the column with third filter."/>
                <param argument="--metadata3Values" type="text" value="" label="Values accepted in this column (separated by comma)."/>
            </when>
        </conditional>
        <section name="MCMC" title="MCMC parameters">
            <param argument="--xmin" type="float" value="0" label="Minimum value to consider in x axis." help="Choose value small enough to go below smallest value."/>
            <param argument="--xmax" type="float" value="2.5" label="Maximum value to consider in x axis." help="Choose value large enough to go above largest value."/>
            <conditional name="xscale">
                <param name="type" type="select" label="Scale for x-axis">
                    <option value="Seurat">Like in Seurat (log(1+targetSum*X))</option>
                    <option value="log">simply log</option>
                </param>
                <when value="Seurat">
                    <param argument="--targetSum" type="float" value="10000" label="targetSum in xscale" help="use 0 for the median of nRNA_Counts"/>
                </when>
                <when value="log"/>
            </conditional>
            <param argument="--nx" type="integer" min="1" value="100" label="Number of values in x to check how your evaluated pdf is compatible with the model." help="Larger values will increase computing time while smaller values will decrease the resolution of your pdf." />
            <param argument="--minScale" type="float" value="0.1" label="Minimal value of the scale of Gaussians" help="cannot be smaller than max of twice the bin size of pdf evaluation and half the bin size"/>
            <param argument="--nnorm" type="integer" min="1" value="2" label="Number of Gaussians to fit." />
            <param argument="--nsampMCMC" type="integer" min="1" value="100000" label="Number of samplings (iterations) of MCMC." />
            <param argument="--seed" type="integer" value="1" label="Seed value to control randomness." help="Change seed value to get new result"/>
            <conditional name="automaticRestart">
                <param name="set_minNeff" type="select" label="Auto-rerun in case of obvious non-convergence">
                    <option value="yes">Yes (the job may never stop)</option>
                    <option value="no">No</option>
                </param>
                <when value="yes">
                    <param argument="--minNeff" type="float" value="200" label="Minimum number of effective samples to output result." help="If the number of effective samples is below this threshold, the MCMC is automatically rerun with 10 times more samples"/>
                </when>
                <when value="no"/>
            </conditional>
        </section>
        <section name="plots" title="Customize plots">
            <param name="image_file_format" type="select" label="Image output format">
                    <option value="png">png</option>
                    <option value="svg">svg</option>
                    <option value="pdf">pdf</option>
            </param>
            <param argument="--title" type="text" value="" label="Title to set to all figures."/>
            <param argument="--removeFirstSamples" type="integer" value="-1" label="Number of samples to ignore before making the plots." help="Use -1 to use a fourth of the number of samples"/>
            <param argument="--nsampInPlot" type="integer" value="100000" label="Approximate number of samples to use in plots"/>
            <param argument="--prettyBins" type="integer" value="-1" label="Number of bins to use in plots." help="Use -1 to use the number of bins used in MCMC"/>            
        </section>
        <section name="advanced" title="Advanced parameters" expanded="false">
            <param argument="--osampx" type="integer" min="1" value="10" label="Oversampling factor of x values when evaluating pdf of Poisson distribution." />
            <param argument="--osampxpdf" type="integer" min="1" value="5" label="Oversampling factor of x values when evaluating pdf at each step of the MCMC." />
            <conditional name="burn">
                <param name="custom" type="select" label="Custom parameters of the burning phase of MCMC">
                    <option value="no">No</option>
                    <option value="yes">Yes</option>
                </param>
                <when value="no"/>
                <when value="yes">
                    <param argument="--nsampBurnMCMC" type="integer" value="-1" label="Number of samplings (iterations) in the burning phase of mcmc (Set -1 for a fourth of total number of samples)" />
                    <param argument="--T0BurnMCMC" type="float" value="100" label="Initial temperature in the burning phase of MCMC" min="1"/>
                </when>
            </conditional>
            <param argument="--coviscale" type="float" value="1" label="Scale factor to apply to covariance of parameters to get random parameters in logevidence evaluation." />
            <param argument="--nis" type="integer" value="1000" label="Size of sampling of random parameters in logevidence evaluation." />
        </section>
    </inputs>
    <outputs>
        <data format="npz" name="output" label="${tool.name} on $getVar('input_counts.input', 'input_counts.inputAnnData') for ${geneColName}: Numpy archive" from_work_dir="output.npz"/>
        <data format="txt" name="neff" label="${tool.name} on $getVar('input_counts.input', 'input_counts.inputAnnData') for ${geneColName}: Neff" from_work_dir="output/baredSC_neff.txt"/>
        <collection type="list" name="qc_plots" label="${tool.name} on $getVar('input_counts.input', 'input_counts.inputAnnData') for ${geneColName}: QC plots">
            <discover_datasets pattern="baredSC_(?P&lt;identifier_0&gt;\S+)\.(?P&lt;ext&gt;.*)" directory="QC"/>
        </collection>
        <data format="txt" name="pdf" label="${tool.name} on $getVar('input_counts.input', 'input_counts.inputAnnData') for ${geneColName}: pdf with error bar" from_work_dir="output/baredSC_pdf.txt"/>
        <data format="png" name="plot" label="${tool.name} on $getVar('input_counts.input', 'input_counts.inputAnnData') for ${geneColName}: plot" from_work_dir="baredSC">
            <change_format>
                <when input="plots.image_file_format" value="png" format="png" />
                <when input="plots.image_file_format" value="svg" format="svg" />
                <when input="plots.image_file_format" value="pdf" format="pdf" />
            </change_format>
        </data>
        <collection type="list" name="other_outputs" label="${tool.name} on $getVar('input_counts.input', 'input_counts.inputAnnData') for ${geneColName}: plots and txt">
            <discover_datasets pattern="baredSC_(?P&lt;identifier_0&gt;\S+)\.(?P&lt;ext&gt;.*)"/>
        </collection>
        <data format="txt" name="logevidence" label="${tool.name} on $getVar('input_counts.input', 'input_counts.inputAnnData') for ${geneColName}: Log evidence" from_work_dir="logevidence.txt"/>
    </outputs>
    <tests>
        <!-- First test -->
        <test>
            <conditional name="input_counts">
                <param name="filetype" value="tabular"/>
                <param name="input" value="nih3t3_generated_2d_2.txt"/>
            </conditional>
            <param name="geneColName" value="0.5_0_0_0.5_x"/>
            <section name="MCMC">
                <param name="nnorm" value="1"/>
            </section>
            <section name="plots">
                <param name="title" value="first gene 1 gauss"/>
            </section>
            <output name="output">
                <assert_contents>
                    <has_size value="1257974" delta="100000"/>
                </assert_contents>
            </output>
            <output name="neff">
                <assert_contents>
                    <has_text_matching expression="^80[0-9][0-9]"/>
                </assert_contents>
            </output>
            <output_collection name="qc_plots" count="3" type="list">
                <element name="convergence" ftype="png">
                    <assert_contents>
                        <has_size value="23021" delta="2000"/>
                    </assert_contents>
                </element>
                <element name="p" ftype="png">
                    <assert_contents>
                        <has_size value="45302" delta="4000"/>
                    </assert_contents>
                </element>
                <element name="corner" ftype="png">
                    <assert_contents>
                        <has_size value="66254" delta="6000"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="pdf">
                <assert_contents>
                    <has_text_matching expression="x\s+low\s+mean\s+high\s+median"/>
                    <has_n_lines n="101"/>
                    <has_line_matching expression="0.0125\s+0.2[0-9]+\s+0.2[0-9]+\s+0.2[0-9]+\s+0.2[0-9]+"/>
                </assert_contents>
            </output>
            <output name="plot" ftype="png">
                <assert_contents>
                    <has_size value="239991" delta="20000"/>
                </assert_contents>
            </output>
            <output_collection name="other_outputs" count="7" type="list">
                <element name="individuals" ftype="png">
                    <assert_contents>
                        <has_size value="54420" delta="5000"/>
                    </assert_contents>
                </element>
                <element name="p" ftype="txt">
                    <assert_contents>
                       <has_line_matching expression="name\s+low\s+median\s+high"/>
                       <has_line_matching expression="mu0\s+0.6[0-9]+\s+0.6[0-9]+\s+0.6[0-9]+"/>
                       <has_text_matching expression="scale0\s+0.3[0-9]+\s+0.3[0-9]+\s+0.3[0-9]+" />
                       <has_n_lines n="3"/>
                    </assert_contents>
                </element>
                <element name="with_posterior" ftype="png">
                    <assert_contents>
                        <has_size value="243443" delta="20000"/>
                    </assert_contents>
                </element>
                <element name="posterior_per_cell" ftype="txt">
                    <assert_contents>
                        <has_n_lines n="2362"/>
                        <has_line_matching expression="mu\s+sd"/>
                    </assert_contents>
                </element>
                <element name="posterior_andco" ftype="png">
                    <assert_contents>
                        <has_size value="194143" delta="10000"/>
                    </assert_contents>
                </element>
                <element name="posterior_individuals" ftype="png">
                    <assert_contents>
                        <has_size value="135293" delta="10000"/>
                    </assert_contents>
                </element>
                <element name="means" ftype="txt">
                    <assert_contents>
                        <has_n_lines n="75001"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="logevidence">
                <assert_contents>
                    <has_text_matching expression="^-42[0-9][0-9]"/>
                </assert_contents>
            </output>
        </test>
        <!-- Second test pdf filtering cells pretty-->
        <test>
            <conditional name="input_counts">
                <param name="filetype" value="tabular"/>
                <param name="input" value="nih3t3_generated_2d_2.txt"/>
            </conditional>
            <param name="geneColName" value="0.5_0_0_0.5_x"/>
            <conditional name="filter">
                <param name="nb" value="1"/>
                <param name="metadata1ColName" value="0_0.5_0.5_0_group"/>
                <param name="metadata1Values" value="1.0"/>
            </conditional>
            <section name="MCMC">
                <param name="nx" value="25"/>
                <param name="nnorm" value="2"/>
                <param name="nsampMCMC" value="20000"/>
                <conditional name="automaticRestart">
                    <param name="set_minNeff" value="yes"/>
                    <param name="minNeff" value="100"/>
                </conditional>
            </section>
            <section name="plots">
                <param name="image_file_format" value="pdf"/>
                <param name="prettyBins" value="200"/>
            </section>
            <output name="output">
                <assert_contents>
                    <has_size value="3622791" delta="300000"/>
                </assert_contents>
            </output>
            <output name="neff">
                <assert_contents>
                    <has_text_matching expression="^37[67]\."/>
                </assert_contents>
            </output>
            <output_collection name="qc_plots" count="3" type="list">
                <element name="convergence" ftype="pdf">
                    <assert_contents>
                        <has_size value="28497" delta="2000"/>
                    </assert_contents>
                </element>
                <element name="p" ftype="pdf">
                    <assert_contents>
                        <has_size value="438200" delta="40000"/>
                    </assert_contents>
                </element>
                <element name="corner" ftype="pdf">
                    <assert_contents>
                        <has_size value="242273" delta="20000"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="pdf">
                <assert_contents>
                    <has_text_matching expression="x\s+low\s+mean\s+high\s+median"/>
                    <has_n_lines n="201"/>
                    <has_line_matching expression="0.0062[45][0-9]+\s+0.1[0-9]+\s+0.4[0-9]+\s+0.8[0-9]+\s+0.4[0-9]+"/>
                </assert_contents>
            </output>
            <output name="plot" ftype="pdf">
                <assert_contents>
                    <has_size value="114053" delta="10000"/>
                </assert_contents>
            </output>
            <output_collection name="other_outputs" count="7" type="list">
                <element name="individuals" ftype="pdf">
                    <assert_contents>
                        <has_size value="150833" delta="10000"/>
                    </assert_contents>
                </element>
                <element name="p" ftype="txt">
                    <assert_contents>
                       <has_line_matching expression="name\s+low\s+median\s+high"/>
                       <has_line_matching expression="mu0\s+-0.1[0-9]+\s+0.2[0-9]+\s+0.3[0-9]+"/>
                       <has_text_matching expression="scale0\s+0.1[0-9]+\s+0.2[0-9]+\s+0.4[0-9]+" />
                       <has_n_lines n="6"/>
                    </assert_contents>
                </element>
                <element name="with_posterior" ftype="pdf">
                    <assert_contents>
                        <has_size value="114932" delta="10000"/>
                    </assert_contents>
                </element>
                <element name="posterior_per_cell" ftype="txt">
                    <assert_contents>
                        <has_n_lines n="1164"/>
                        <has_line_matching expression="mu\s+sd"/>
                    </assert_contents>
                </element>
                <element name="posterior_andco" ftype="pdf">
                    <assert_contents>
                        <has_size value="41486" delta="4000"/>
                    </assert_contents>
                </element>
                <element name="posterior_individuals" ftype="pdf">
                    <assert_contents>
                        <has_size value="117700" delta="10000"/>
                    </assert_contents>
                </element>
                <element name="means" ftype="txt">
                    <assert_contents>
                        <has_n_lines n="100000"/>
                    </assert_contents>
                </element>
            </output_collection>
            <output name="logevidence">
                <assert_contents>
                    <has_text_matching expression="^-20[0-9][0-9]\."/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <expand macro="helpcitations"/>
</tool>